package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.PullRequests
import jetbrains.buildServer.configs.kotlin.buildFeatures.pullRequests
import jetbrains.buildServer.configs.kotlin.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'ValidateInsuranceSuiteConfigurationUpgradeToolsisconfigupgradetools450isconfigupgradetools450src'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("ValidateInsuranceSuiteConfigurationUpgradeToolsisconfigupgradetools450isconfigupgradetools450src")) {
    expectSteps {
        script {
            name = "Build the html5 output"
            id = "BUILD_THE_HTML5_OUTPUT"
            scriptContent = """
                #!/bin/bash
                                set -xe
                                                
                                SECONDS=0
                                
                                echo "Downloading the ditaval file from common-gw submodule"
                                    
                export COMMON_GW_DITAVALS_DIR="%teamcity.build.checkoutDir%/common_gw_ditavals"
                mkdir -p ${'$'}COMMON_GW_DITAVALS_DIR && cd ${'$'}COMMON_GW_DITAVALS_DIR 
                curl -O https://stash.guidewire.com/rest/api/1.0/projects/DOCSOURCES/repos/common-gw/raw/ditavals/GW-Generic-Release.ditaval \
                    -H "Accept: application/json" \
                    -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%"
                
                                echo "Building output"
                                dita -i "%teamcity.build.checkoutDir%/_supermap.ditamap" -o "%teamcity.build.checkoutDir%/out/html5" -l "%teamcity.build.checkoutDir%/html5_build.log" --args.draft "yes" --filter "%teamcity.build.checkoutDir%/common_gw_ditavals/GW-Generic-Release.ditaval" -f "html5-Guidewire" --args.rellinks "nofamily" --generate.build.data "yes" --git.url "gitUrl" --git.branch "gitBranch" --gw-base-url "preview/isconfigupgradetools450src/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_isconfigupgradetools450src%/isconfigupgradetools450" --temp "%teamcity.build.checkoutDir%/tmp/html5" --clean.temp "no" --schematron.validate "yes" %env.ENABLE_DEBUG_MODE% --create-index-redirect "yes" && mkdir -p "%teamcity.build.checkoutDir%/schematron_reports_dir" && cp "%teamcity.build.checkoutDir%/tmp/html5/validation-report.xml" "%teamcity.build.checkoutDir%/schematron_reports_dir/"
                mkdir -p "%teamcity.build.checkoutDir%/dita_ot_logs" && cp "%teamcity.build.checkoutDir%/html5_build.log" "%teamcity.build.checkoutDir%/dita_ot_logs/"
                                
                                duration=${'$'}SECONDS
                                echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest"
        }
        script {
            name = "Upload content to the S3 bucket"
            id = "UPLOAD_CONTENT_TO_THE_S3_BUCKET"

            conditions {
                equals("teamcity.build.branch.is_default", "false")
            }
            scriptContent = """
                #!/bin/bash
                                    set -xe
                                    
                                    export AWS_ACCESS_KEY_ID="%env.ATMOS_DEV_AWS_ACCESS_KEY_ID%"
                export AWS_SECRET_ACCESS_KEY="%env.ATMOS_DEV_AWS_SECRET_ACCESS_KEY%"
                export AWS_DEFAULT_REGION="%env.ATMOS_DEV_AWS_DEFAULT_REGION%"
                                    
                                    aws s3 sync "%teamcity.build.checkoutDir%/out/html5" s3://tenant-doctools-staging-builds/preview/isconfigupgradetools450src/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_isconfigupgradetools450src%/isconfigupgradetools450 --delete
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/devex-docker-dev/atmosdeploy:2.6.0"
            dockerRunParameters = "-v /var/run/docker.sock:/var/run/docker.sock -v ${'$'}pwd:/app:ro"
        }
        script {
            name = "Create preview URL file"
            id = "CREATE_PREVIEW_URL_FILE"

            conditions {
                equals("teamcity.build.branch.is_default", "false")
            }
            scriptContent = """
                #!/bin/bash
                set -xe
                
                echo "Output preview available at https://docs.staging.ccs.guidewire.net/preview/isconfigupgradetools450src/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_isconfigupgradetools450src%/isconfigupgradetools450" > preview_url.txt
            """.trimIndent()
        }
        script {
            name = "Add a pull request comment (preview link)"
            id = "ADD_A_PULL_REQUEST_COMMENT_(PREVIEW_LINK)"

            conditions {
                equals("teamcity.build.branch.is_default", "false")
            }
            scriptContent = """
                #!/bin/bash
                    set -xe
                curl -X POST https://stash.guidewire.com/rest/api/1.0/projects/docsources/repos/insurancesuite-configuration-upgrade-tools/pull-requests/%teamcity.pullRequest.branch.pullrequests%/comments \
                        -H "Accept: application/json" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%" \
                        -d '{ "text": "Hi, I created a preview for validation build %build.number%: https://docs.staging.ccs.guidewire.net/preview/isconfigupgradetools450src/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_isconfigupgradetools450src%/isconfigupgradetools450"}'
            """.trimIndent()
        }
        script {
            name = "Build the dita output"
            id = "BUILD_THE_DITA_OUTPUT"
            scriptContent = """
                #!/bin/bash
                                set -xe
                                                
                                SECONDS=0
                                
                                echo "Downloading the ditaval file from common-gw submodule"
                                    
                export COMMON_GW_DITAVALS_DIR="%teamcity.build.checkoutDir%/common_gw_ditavals"
                mkdir -p ${'$'}COMMON_GW_DITAVALS_DIR && cd ${'$'}COMMON_GW_DITAVALS_DIR 
                curl -O https://stash.guidewire.com/rest/api/1.0/projects/DOCSOURCES/repos/common-gw/raw/ditavals/GW-Generic-Release.ditaval \
                    -H "Accept: application/json" \
                    -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%"
                
                                echo "Building output"
                                dita -i "%teamcity.build.checkoutDir%/_supermap.ditamap" -o "%teamcity.build.checkoutDir%/out/dita" -l "%teamcity.build.checkoutDir%/dita_build.log" --args.draft "yes" --filter "%teamcity.build.checkoutDir%/common_gw_ditavals/GW-Generic-Release.ditaval" -f "gw_dita" && mkdir -p "%teamcity.build.checkoutDir%/normalized_dita_dir" && cp -R "%teamcity.build.checkoutDir%/out/dita/"* "%teamcity.build.checkoutDir%/normalized_dita_dir/"
                                
                                duration=${'$'}SECONDS
                                echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest"
        }
        script {
            name = "Get document details"
            id = "GET_DOCUMENT_DETAILS"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                cat << EOF | jq '. += {"gitBuildBranch": "%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_isconfigupgradetools450src%", "gitSourceId": "isconfigupgradetools450src"}' > "%teamcity.build.checkoutDir%/doc-info.json" | jq .
                {"indexForSearch":true,"displayOnLandingPages":true,"metadata":{"product":["InsuranceSuite Configuration Upgrade Tools"],"release":["Aspen","Banff","Cortina","Dobson","Elysian","Flaine"],"version":["4.5.0"],"platform":["Cloud","Self-managed"]},"internal":false,"earlyAccess":false,"public":false,"environments":["staging","prod"],"id":"isconfigupgradetools450","title":"InsuranceSuite Configuration Upgrade Tools","url":"isconfigupgradetools/450"}
                EOF
                
                cat "%teamcity.build.checkoutDir%/doc-info.json"
            """.trimIndent()
        }
        script {
            name = "Run GW validations for issues in DITA files"
            id = "RUN_GW_VALIDATIONS_FOR_ISSUES_IN_DITA_FILES"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE
            workingDir = "%teamcity.build.checkoutDir%"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export EXIT_CODE=0
                doc_validator --elasticsearch-urls "https://docsearch-doctools.staging.ccs.guidewire.net" --doc-info "%teamcity.build.checkoutDir%/doc-info.json" validators "%teamcity.build.checkoutDir%/normalized_dita_dir" dita || EXIT_CODE=${'$'}?
                ##teamcity[setParameter name='env.VALIDATORS_DITA_EXIT_CODE' value='${'$'}EXIT_CODE']
                exit ${'$'}EXIT_CODE
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/doc-validator:latest"
        }
        script {
            name = "Add a pull request comment (validators_dita log link)"
            id = "ADD_A_PULL_REQUEST_COMMENT_(VALIDATORS_DITA_LOG_LINK)"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE

            conditions {
                equals("teamcity.build.branch.is_default", "false")
                equals("env.VALIDATORS_DITA_EXIT_CODE", "1")
            }
            scriptContent = """
                #!/bin/bash
                    set -xe
                curl -X POST https://stash.guidewire.com/rest/api/1.0/projects/docsources/repos/insurancesuite-configuration-upgrade-tools/pull-requests/%teamcity.pullRequest.branch.pullrequests%/comments \
                        -H "Accept: application/json" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%" \
                        -d '{ "text": "Hi, it's validators_dita. I found some issues in validation build %build.number%: https://gwre-devexp-ci-production-devci.gwre-devops.net/repository/download/%system.teamcity.buildType.id%/%teamcity.build.id%:id/build_logs/validators_dita.log"}'
            """.trimIndent()
        }
        script {
            name = "Run GW validations for miscellaneous issues, like missing file extensions"
            id = "RUN_GW_VALIDATIONS_FOR_MISCELLANEOUS_ISSUES,_LIKE_MISSING_FILE_EXTENSIONS"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE
            workingDir = "%teamcity.build.checkoutDir%"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export EXIT_CODE=0
                doc_validator --elasticsearch-urls "https://docsearch-doctools.staging.ccs.guidewire.net" --doc-info "%teamcity.build.checkoutDir%/doc-info.json" validators "%teamcity.build.checkoutDir%/normalized_dita_dir" files || EXIT_CODE=${'$'}?
                ##teamcity[setParameter name='env.VALIDATORS_FILES_EXIT_CODE' value='${'$'}EXIT_CODE']
                exit ${'$'}EXIT_CODE
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/doc-validator:latest"
        }
        script {
            name = "Add a pull request comment (validators_files log link)"
            id = "ADD_A_PULL_REQUEST_COMMENT_(VALIDATORS_FILES_LOG_LINK)"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE

            conditions {
                equals("teamcity.build.branch.is_default", "false")
                equals("env.VALIDATORS_FILES_EXIT_CODE", "1")
            }
            scriptContent = """
                #!/bin/bash
                    set -xe
                curl -X POST https://stash.guidewire.com/rest/api/1.0/projects/docsources/repos/insurancesuite-configuration-upgrade-tools/pull-requests/%teamcity.pullRequest.branch.pullrequests%/comments \
                        -H "Accept: application/json" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%" \
                        -d '{ "text": "Hi, it's validators_files. I found some issues in validation build %build.number%: https://gwre-devexp-ci-production-devci.gwre-devops.net/repository/download/%system.teamcity.buildType.id%/%teamcity.build.id%:id/build_logs/validators_files.log"}'
            """.trimIndent()
        }
        script {
            name = "Get issues from log files generated by DITA OT builds"
            id = "GET_ISSUES_FROM_LOG_FILES_GENERATED_BY_DITA_OT_BUILDS"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE
            workingDir = "%teamcity.build.checkoutDir%"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export EXIT_CODE=0
                doc_validator --elasticsearch-urls "https://docsearch-doctools.staging.ccs.guidewire.net" --doc-info "%teamcity.build.checkoutDir%/doc-info.json" extractors "%teamcity.build.checkoutDir%/dita_ot_logs" dita-ot-logs || EXIT_CODE=${'$'}?
                ##teamcity[setParameter name='env.EXTRACTORS_DITA_OT_LOGS_EXIT_CODE' value='${'$'}EXIT_CODE']
                exit ${'$'}EXIT_CODE
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/doc-validator:latest"
        }
        script {
            name = "Add a pull request comment (extractors_dita_ot_logs log link)"
            id = "ADD_A_PULL_REQUEST_COMMENT_(EXTRACTORS_DITA_OT_LOGS_LOG_LINK)"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE

            conditions {
                equals("teamcity.build.branch.is_default", "false")
                equals("env.EXTRACTORS_DITA_OT_LOGS_EXIT_CODE", "1")
            }
            scriptContent = """
                #!/bin/bash
                    set -xe
                curl -X POST https://stash.guidewire.com/rest/api/1.0/projects/docsources/repos/insurancesuite-configuration-upgrade-tools/pull-requests/%teamcity.pullRequest.branch.pullrequests%/comments \
                        -H "Accept: application/json" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%" \
                        -d '{ "text": "Hi, it's extractors_dita_ot_logs. I found some issues in validation build %build.number%: https://gwre-devexp-ci-production-devci.gwre-devops.net/repository/download/%system.teamcity.buildType.id%/%teamcity.build.id%:id/build_logs/extractors_dita_ot_logs.log"}'
            """.trimIndent()
        }
        script {
            name = "Get issues from reports generated by Schematron validations"
            id = "GET_ISSUES_FROM_REPORTS_GENERATED_BY_SCHEMATRON_VALIDATIONS"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE
            workingDir = "%teamcity.build.checkoutDir%"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export EXIT_CODE=0
                doc_validator --elasticsearch-urls "https://docsearch-doctools.staging.ccs.guidewire.net" --doc-info "%teamcity.build.checkoutDir%/doc-info.json" extractors "%teamcity.build.checkoutDir%/schematron_reports_dir" schematron-reports || EXIT_CODE=${'$'}?
                ##teamcity[setParameter name='env.EXTRACTORS_SCHEMATRON_REPORTS_EXIT_CODE' value='${'$'}EXIT_CODE']
                exit ${'$'}EXIT_CODE
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/doc-validator:latest"
        }
        script {
            name = "Add a pull request comment (extractors_schematron_reports log link)"
            id = "ADD_A_PULL_REQUEST_COMMENT_(EXTRACTORS_SCHEMATRON_REPORTS_LOG_LINK)"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE

            conditions {
                equals("teamcity.build.branch.is_default", "false")
                equals("env.EXTRACTORS_SCHEMATRON_REPORTS_EXIT_CODE", "1")
            }
            scriptContent = """
                #!/bin/bash
                    set -xe
                curl -X POST https://stash.guidewire.com/rest/api/1.0/projects/docsources/repos/insurancesuite-configuration-upgrade-tools/pull-requests/%teamcity.pullRequest.branch.pullrequests%/comments \
                        -H "Accept: application/json" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%" \
                        -d '{ "text": "Hi, it's extractors_schematron_reports. I found some issues in validation build %build.number%: https://gwre-devexp-ci-production-devci.gwre-devops.net/repository/download/%system.teamcity.buildType.id%/%teamcity.build.id%:id/build_logs/extractors_schematron_reports.log"}'
            """.trimIndent()
        }
    }
    steps {
        update<ScriptBuildStep>(10) {
            id = "GET_ISSUES_FROM_LOG_FILES_GENERATED_BY_DITA_OT_BUILDS"
            clearConditions()
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export EXIT_CODE=0
                doc_validator --elasticsearch-urls "https://docsearch-doctools.staging.ccs.guidewire.net" --doc-info "%teamcity.build.checkoutDir%/doc-info.json" extractors "%teamcity.build.checkoutDir%/dita_ot_logs" dita-ot-logs || EXIT_CODE=${'$'}?
                if [[ ${'$'}EXIT_CODE == 1]]; then
                    ##teamcity[setParameter name='env.EXTRACTORS_DITA_OT_LOGS_EXIT_CODE' value='1']
                fi
                exit ${'$'}EXIT_CODE
            """.trimIndent()
        }
    }

    features {
        val feature1 = find<PullRequests> {
            pullRequests {
                id = "BUILD_EXT_1"
                provider = bitbucketServer {
                    serverUrl = "https://stash.guidewire.com"
                    authType = token {
                        token = "%env.BITBUCKET_ACCESS_TOKEN%"
                    }
                    filterTargetBranch = "+:refs/heads/release/4.5.0"
                }
            }
        }
        feature1.apply {
            provider = bitbucketServer {
                serverUrl = "https://stash.guidewire.com"
                authType = token {
                    token = "credentialsJSON:28000373-d3ae-4957-878b-a52ae604781a"
                }
                filterSourceBranch = ""
                filterTargetBranch = "+:refs/heads/release/4.5.0"
            }
        }
    }
}
