package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.CommitStatusPublisher
import jetbrains.buildServer.configs.kotlin.buildFeatures.PullRequests
import jetbrains.buildServer.configs.kotlin.buildFeatures.commitStatusPublisher
import jetbrains.buildServer.configs.kotlin.buildFeatures.pullRequests
import jetbrains.buildServer.configs.kotlin.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'ValidateAPDAPIdocsapdmaindocapdapiintsrc'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("ValidateAPDAPIdocsapdmaindocapdapiintsrc")) {
    expectSteps {
        script {
            name = "Build the yarn project"
            scriptContent = """
                #!/bin/bash
                                    
                                    export DEPLOY_ENV="staging"
                                    export GW_DOC_ID="apdmaindoc"
                                    export GW_PRODUCT="PolicyCenter"
                                    export GW_PLATFORM="Cloud"
                                    export GW_VERSION="latest"
                                    export TARGET_URL="https://docs.staging.ccs.guidewire.net"
                                    export BASE_URL="/preview/apdapiintsrc/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_apdapiintsrc%/apdmaindoc/"
                                    
                                    
                                    cd "%teamcity.build.checkoutDir%"
                                    yarn install
                                    export EXIT_CODE=0
                yarn build &> "%teamcity.build.checkoutDir%/yarn_build.log" || EXIT_CODE=${'$'}?
                
                if [[ ${'$'}EXIT_CODE != 0 ]]; then
                    echo "VALIDATION FAILED: High severity issues found."
                    echo "Check "yarn_build.log" in the build artifacts for more details."
                fi
                    
                exit ${'$'}EXIT_CODE
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/hub-docker-remote/node:16.17.0"
            dockerRunParameters = "--user 1000:1000"
        }
        script {
            name = "Upload content to the S3 bucket"

            conditions {
                equals("%teamcity.build.branch.is_default%", "false")
            }
            scriptContent = """
                #!/bin/bash
                                    set -xe
                                    
                                    export AWS_ACCESS_KEY_ID="%env.ATMOS_DEV_AWS_ACCESS_KEY_ID%"
                export AWS_SECRET_ACCESS_KEY="%env.ATMOS_DEV_AWS_SECRET_ACCESS_KEY%"
                export AWS_DEFAULT_REGION="%env.ATMOS_DEV_AWS_DEFAULT_REGION%"
                                    
                                    aws s3 sync "%teamcity.build.checkoutDir%/build" s3://tenant-doctools-staging-builds/preview/apdapiintsrc/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_apdapiintsrc%/apdmaindoc --delete
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/devex-docker-dev/atmosdeploy:2.6.0"
            dockerRunParameters = "-v /var/run/docker.sock:/var/run/docker.sock -v ${'$'}pwd:/app:ro"
        }
        script {
            name = "Create preview URL file"

            conditions {
                equals("%teamcity.build.branch.is_default%", "false")
            }
            scriptContent = """
                #!/bin/bash
                set -xe
                
                echo "Output preview available at https://docs.staging.ccs.guidewire.net/preview/apdapiintsrc/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_apdapiintsrc%/apdmaindoc" > preview_url.txt
            """.trimIndent()
        }
        script {
            name = "Add a pull request comment"

            conditions {
                equals("%teamcity.build.branch.is_default%", "false")
            }
            scriptContent = """
                #!/bin/bash
                    set -xe
                curl -X POST https://stash.guidewire.com/rest/api/1.0/projects/docsources/repos/apd-api-docs/pull-requests/%teamcity.pullRequest.branch.pullrequests%/comments \
                        -H "Accept: application/json" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Bearer %env.BITBUCKET_ACCESS_TOKEN%" \
                        -d '{ "text": "Hi, I created a preview for validation build %build.number%: https://docs.staging.ccs.guidewire.net/preview/apdapiintsrc/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_apdapiintsrc%/apdmaindoc"}'
            """.trimIndent()
        }
    }
    steps {
        update<ScriptBuildStep>(1) {
            clearConditions()

            conditions {
                equals("teamcity.build.branch.is_default", "false")
            }
        }
        update<ScriptBuildStep>(2) {
            clearConditions()

            conditions {
                equals("teamcity.build.branch.is_default", "false")
            }
        }
        update<ScriptBuildStep>(3) {
            clearConditions()

            conditions {
                equals("teamcity.build.branch.is_default", "false")
            }
        }
    }

    features {
        val feature1 = find<PullRequests> {
            pullRequests {
                provider = bitbucketServer {
                    serverUrl = "https://stash.guidewire.com"
                    authType = token {
                        token = "%env.BITBUCKET_ACCESS_TOKEN%"
                    }
                    filterTargetBranch = "+:refs/heads/main"
                }
            }
        }
        feature1.apply {
            provider = bitbucketServer {
                serverUrl = "https://stash.guidewire.com"
                authType = token {
                    token = "credentialsJSON:28000373-d3ae-4957-878b-a52ae604781a"
                }
                filterSourceBranch = ""
                filterTargetBranch = "+:refs/heads/main"
            }
        }
        val feature2 = find<CommitStatusPublisher> {
            commitStatusPublisher {
                publisher = bitbucketServer {
                    url = "https://stash.guidewire.com"
                    userName = "%env.BITBUCKET_SERVICE_ACCOUNT_USERNAME%"
                    password = "%env.BITBUCKET_ACCESS_TOKEN%"
                }
            }
        }
        feature2.apply {
            publisher = bitbucketServer {
                url = "https://stash.guidewire.com"
                userName = "%env.BITBUCKET_SERVICE_ACCOUNT_USERNAME%"
                password = "credentialsJSON:28000373-d3ae-4957-878b-a52ae604781a"
            }
        }
    }
}
