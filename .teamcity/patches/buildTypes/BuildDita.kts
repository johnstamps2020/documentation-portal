package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.dockerSupport
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'BuildDita'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("BuildDita")) {
    params {
        add {
            param("env.SOURCES_ROOT", "src_root")
        }
    }

    expectSteps {
        script {
            name = "Build webhelp from DITA"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export GW_PRODUCT=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).metadata.product[0]' %env.CONFIG_FILE%)                
                export GW_PLATFORM=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).metadata.platform[0]' %env.CONFIG_FILE%)
                export GW_VERSION=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).metadata.version' %env.CONFIG_FILE%)
                export FILTER_PATH=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).build.filter' %env.CONFIG_FILE%)
                export ROOT_MAP=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).build.root' %env.CONFIG_FILE%)
                
                export SOURCE_ID=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).build.src' %env.CONFIG_FILE%)
                export GIT_URL=${'$'}(jq -r --arg source_id "${'$'}SOURCE_ID" '.sources | .[] | select(.id == ${'$'}source_id).gitUrl' %env.SOURCES_FILE%)
                export GIT_BRANCH=${'$'}(jq -r --arg source_id "${'$'}SOURCE_ID" '.sources | .[] | select(.id == ${'$'}source_id).branch' %env.SOURCES_FILE%)
                
                if [[ "${'$'}GIT_BRANCH" == null ]]; then
                  export GIT_BRANCH="master"
                fi
                
                export WORKING_DIR=${'$'}(pwd)
                export INPUT_PATH="input"
                export OUTPUT_PATH="out"
                
                git clone --single-branch --branch ${'$'}GIT_BRANCH ${'$'}GIT_URL ${'$'}WORKING_DIR/${'$'}INPUT_PATH                
                
                SECONDS=0
                docker login -u '%env.ARTIFACTORY_USERNAME%' --password '%env.ARTIFACTORY_PASSWORD%' artifactory.guidewire.com
                docker pull artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest
                
                echo "Building webhelp for ${'$'}GW_PRODUCT ${'$'}GW_PLATFORM ${'$'}GW_VERSION using filter ${'$'}FILTER_PATH"
                docker run -i \
                  -v "${'$'}WORKING_DIR":/src artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest \
                  -i /src/"${'$'}INPUT_PATH"/"${'$'}ROOT_MAP" \
                  -o /src/"${'$'}OUTPUT_PATH" \
                  -f webhelp_Guidewire \
                  --filter /src/"${'$'}FILTER_PATH" \
                  --use-doc-portal-params yes \
                  --gw-product "${'$'}GW_PRODUCT" \
                  --gw-platform "${'$'}GW_PLATFORM" \
                  --gw-version "${'$'}GW_VERSION" \
                  --create-index-redirect yes \
                  --webhelp.publication.toc.links all
                 
                duration=${'$'}SECONDS
                echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
            """.trimIndent()
        }
    }
    steps {
        update<ScriptBuildStep>(0) {
            name = "Build webhelp from DITA (1)"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export SOURCE_ID=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).build.src' %env.CONFIG_FILE%)
                export GIT_URL=${'$'}(jq -r --arg source_id "${'$'}SOURCE_ID" '.sources | .[] | select(.id == ${'$'}source_id).gitUrl' %env.SOURCES_FILE%)
                export GIT_BRANCH=${'$'}(jq -r --arg source_id "${'$'}SOURCE_ID" '.sources | .[] | select(.id == ${'$'}source_id).branch' %env.SOURCES_FILE%)
                
                if [[ "${'$'}GIT_BRANCH" == null ]]; then
                  export GIT_BRANCH="master"
                fi
                
                git clone --single-branch --branch ${'$'}GIT_BRANCH ${'$'}GIT_URL %env.SOURCES_ROOT%
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
        }
        insert(1) {
            script {
                name = "Build webhelp from DITA"
                scriptContent = """
                    #!/bin/bash
                    set -xe
                    
                    export GW_PRODUCT=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).metadata.product[0]' %env.CONFIG_FILE%)                
                    export GW_PLATFORM=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).metadata.platform[0]' %env.CONFIG_FILE%)
                    export GW_VERSION=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).metadata.version' %env.CONFIG_FILE%)
                    export FILTER_PATH=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).build.filter' %env.CONFIG_FILE%)
                    export ROOT_MAP=${'$'}(jq -r --arg doc_id "${'$'}DOC_ID" '.docs | .[] | select(.id == ${'$'}doc_id).build.root' %env.CONFIG_FILE%)
                    
                    export WORKING_DIR=${'$'}(pwd)
                    export INPUT_PATH="input"
                    export OUTPUT_PATH="out"              
                    
                    SECONDS=0
                    docker login -u '%env.ARTIFACTORY_USERNAME%' --password '%env.ARTIFACTORY_PASSWORD%' artifactory.guidewire.com
                    docker pull artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest
                    
                    echo "Building webhelp for ${'$'}GW_PRODUCT ${'$'}GW_PLATFORM ${'$'}GW_VERSION using filter ${'$'}FILTER_PATH"
                    docker run -i \
                      -i "${'$'}INPUT_PATH"/"${'$'}ROOT_MAP" \
                      -o "${'$'}OUTPUT_PATH" \
                      -f webhelp_Guidewire \
                      --filter "${'$'}FILTER_PATH" \
                      --use-doc-portal-params yes \
                      --gw-product "${'$'}GW_PRODUCT" \
                      --gw-platform "${'$'}GW_PLATFORM" \
                      --gw-version "${'$'}GW_VERSION" \
                      --create-index-redirect yes \
                      --webhelp.publication.toc.links all
                     
                    duration=${'$'}SECONDS
                    echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
                """.trimIndent()
                dockerImage = "artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest"
                dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            }
        }
    }

    features {
        add {
            dockerSupport {
                loginToRegistry = on {
                    dockerRegistryId = "PROJECT_EXT_155"
                }
            }
        }
    }
}
