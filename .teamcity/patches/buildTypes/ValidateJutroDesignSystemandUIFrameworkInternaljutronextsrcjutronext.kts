package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.CommitStatusPublisher
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.PullRequests
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.commitStatusPublisher
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.pullRequests
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'ValidateJutroDesignSystemandUIFrameworkInternaljutronextsrcjutronext'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("ValidateJutroDesignSystemandUIFrameworkInternaljutronextsrcjutronext")) {
    expectSteps {
        script {
            name = "Build the yarn project"
            scriptContent = """
                #!/bin/bash
                                    
                                    export DEPLOY_ENV="int"
                                    export GW_DOC_ID="jutronext"
                                    export GW_PRODUCT="Jutro Design System"
                                    export GW_PLATFORM="Cloud"
                                    export GW_VERSION="next"
                                    export TARGET_URL="https://docs.int.ccs.guidewire.net"
                                    export BASE_URL="/preview/srcjutronext/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_srcjutronext%/jutronext/"
                                    
                                    
                                    # legacy Jutro repos
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/jutro-npm-dev -s @jutro
                                    npm config set @jutro:registry https://artifactory.guidewire.com/api/npm/jutro-npm-dev/
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/globalization-npm-release -s @gwre-g11n
                                    npm config set @gwre-g11n:registry https://artifactory.guidewire.com/api/npm/globalization-npm-release/
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/elixir -s @elixir
                                    npm config set @elixir:registry https://artifactory.guidewire.com/api/npm/elixir/
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/portfoliomunster-npm-dev -s @gtui
                                    npm config set @gtui:registry https://artifactory.guidewire.com/api/npm/portfoliomunster-npm-dev/
                                                        
                                    # new Jutro proxy repo
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/jutro-suite-npm-dev
                                    npm config set registry https://artifactory.guidewire.com/api/npm/jutro-suite-npm-dev/
                
                                    # Doctools repo
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/doctools-npm-dev -s @doctools
                                    npm config set @doctools:registry https://artifactory.guidewire.com/api/npm/doctools-npm-dev/
                                                        
                                    cd "%teamcity.build.checkoutDir%/website"
                                    yarn
                                    export EXIT_CODE=0
                yarn build &> "%teamcity.build.checkoutDir%/website/yarn_build.log" || EXIT_CODE=${'$'}?
                
                if [[ ${'$'}EXIT_CODE != 0 ]]; then
                    echo VALIDATION FAILED: High severity issues found.
                    echo Check "yarn_build.log" in the build artifacts for more details.
                fi
                    
                exit ${'$'}EXIT_CODE
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerPull = true
            dockerImage = "artifactory.guidewire.com/devex-docker-dev/node:14.14.0"
            dockerRunParameters = "--user 1000:1000"
        }
        script {
            name = "Upload content to the S3 bucket"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                aws s3 sync "%teamcity.build.checkoutDir%/website/build" s3://tenant-doctools-int-builds/preview/srcjutronext/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_srcjutronext%/jutronext --delete
            """.trimIndent()
        }
        script {
            name = "Create preview URL file"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                echo "Output preview available at https://docs.int.ccs.guidewire.net/preview/srcjutronext/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_srcjutronext%/jutronext" > preview_url.txt
            """.trimIndent()
        }
    }
    steps {
        update<ScriptBuildStep>(0) {
            clearConditions()
            scriptContent = """
                #!/bin/bash
                                    
                                    export DEPLOY_ENV="int"
                                    export GW_DOC_ID="jutronext"
                                    export GW_PRODUCT="Jutro Design System"
                                    export GW_PLATFORM="Cloud"
                                    export GW_VERSION="next"
                                    export TARGET_URL="https://docs.int.ccs.guidewire.net"
                                    export BASE_URL="/preview/srcjutronext/%teamcity.build.vcs.branch.DocumentationTools_DocumentationPortal_srcjutronext%/jutronext/"
                                    
                                    
                                    # legacy Jutro repos
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/jutro-npm-dev -s @jutro
                                    npm config set @jutro:registry https://artifactory.guidewire.com/api/npm/jutro-npm-dev/
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/globalization-npm-release -s @gwre-g11n
                                    npm config set @gwre-g11n:registry https://artifactory.guidewire.com/api/npm/globalization-npm-release/
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/elixir -s @elixir
                                    npm config set @elixir:registry https://artifactory.guidewire.com/api/npm/elixir/
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/portfoliomunster-npm-dev -s @gtui
                                    npm config set @gtui:registry https://artifactory.guidewire.com/api/npm/portfoliomunster-npm-dev/
                                                        
                                    # new Jutro proxy repo
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/jutro-suite-npm-dev
                                    npm config set registry https://artifactory.guidewire.com/api/npm/jutro-suite-npm-dev/
                
                                    # Doctools repo
                                    npm-cli-login -u "%env.SERVICE_ACCOUNT_USERNAME%" -p "%env.ARTIFACTORY_API_KEY%" -e doctools@guidewire.com -r https://artifactory.guidewire.com/api/npm/doctools-npm-dev -s @doctools
                                    npm config set @doctools:registry https://artifactory.guidewire.com/api/npm/doctools-npm-dev/
                                                        
                                    cd "%teamcity.build.checkoutDir%/website"
                                    yarn
                                    export EXIT_CODE=0
                yarn build &> "%teamcity.build.checkoutDir%/website/yarn_build.log" || EXIT_CODE=${'$'}?
                
                if [[ ${'$'}EXIT_CODE != 0 ]]; then
                    echo "VALIDATION FAILED: High severity issues found."
                    echo "Check "yarn_build.log" in the build artifacts for more details."
                fi
                    
                exit ${'$'}EXIT_CODE
            """.trimIndent()
        }
    }

    features {
        val feature1 = find<PullRequests> {
            pullRequests {
                provider = bitbucketServer {
                    serverUrl = "https://stash.guidewire.com"
                    authType = password {
                        username = "%env.SERVICE_ACCOUNT_USERNAME%"
                        password = "%env.BITBUCKET_ACCESS_TOKEN%"
                    }
                    filterTargetBranch = "+:refs/heads/main"
                }
            }
        }
        feature1.apply {
            provider = bitbucketServer {
                serverUrl = "https://stash.guidewire.com"
                authType = password {
                    username = "%env.SERVICE_ACCOUNT_USERNAME%"
                    password = "credentialsJSON:28000373-d3ae-4957-878b-a52ae604781a"
                }
                filterSourceBranch = ""
                filterTargetBranch = "+:refs/heads/main"
            }
        }
        val feature2 = find<CommitStatusPublisher> {
            commitStatusPublisher {
                publisher = bitbucketServer {
                    url = "https://stash.guidewire.com"
                    userName = "%env.SERVICE_ACCOUNT_USERNAME%"
                    password = "%env.BITBUCKET_ACCESS_TOKEN%"
                }
            }
        }
        feature2.apply {
            publisher = bitbucketServer {
                url = "https://stash.guidewire.com"
                userName = "%env.SERVICE_ACCOUNT_USERNAME%"
                password = "credentialsJSON:28000373-d3ae-4957-878b-a52ae604781a"
            }
        }
    }
}
