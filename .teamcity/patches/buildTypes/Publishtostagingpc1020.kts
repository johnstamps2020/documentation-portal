package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'Publishtostagingpc1020'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("Publishtostagingpc1020")) {
    expectSteps {
        script {
            name = "Upload content to the S3 bucket"
            id = "UPLOAD_CONTENT_TO_THE_S3_BUCKET"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                aws s3 sync "%teamcity.build.checkoutDir%/out" s3://tenant-doctools-staging-builds/self-managed/pc/1020 --delete
            """.trimIndent()
        }
        script {
            name = "Get config file"
            id = "GET_CONFIG_FILE"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export CONFIG_FILE="%teamcity.build.workingDir%/config.json"
                export TMP_CONFIG_FILE="%teamcity.build.workingDir%/tmp_config.json"
                export CONFIG_FILE_URL="https://ditaot.internal.staging.ccs.guidewire.net/portal-config/config.json"
                
                curl ${'$'}CONFIG_FILE_URL > ${'$'}TMP_CONFIG_FILE
                
                if [[ "staging" == "prod" ]]; then
                    cat ${'$'}TMP_CONFIG_FILE | jq -r '{"docs": [.docs[] | select(.url | startswith("portal/secure/doc") | not)]}' > ${'$'}CONFIG_FILE                 
                elif [[ "staging" == "portal2" ]]; then
                    cat ${'$'}TMP_CONFIG_FILE | jq -r '{"docs": [.docs[] | select(.url | startswith("portal/secure/doc"))]}' > ${'$'}CONFIG_FILE
                else
                    cat ${'$'}TMP_CONFIG_FILE > ${'$'}CONFIG_FILE
                fi
            """.trimIndent()
        }
        script {
            name = "Run the doc crawler"
            id = "RUN_THE_DOC_CRAWLER"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                export INDEX_NAME="gw-docs"
                export CONFIG_FILE="%teamcity.build.workingDir%/config.json"
                export DOC_ID="pc1020"
                export DOC_S3_URL="https://ditaot.internal.staging.ccs.guidewire.net"
                export ELASTICSEARCH_URLS="https://docsearch-doctools.staging.ccs.guidewire.net"
                export APP_BASE_URL="https://docs.staging.ccs.guidewire.net"
                
                cat > scrapy.cfg <<- EOM
                [settings]
                default = doc_crawler.settings
                EOM
                
                doc_crawler
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/doc-crawler:latest"
        }
        script {
            name = "Build the webhelp output"
            id = "BUILD_THE_WEBHELP_OUTPUT"
            scriptContent = """
                #!/bin/bash
                set -xe
                                
                SECONDS=0
                
                echo "Building output"
                dita -i "%teamcity.build.checkoutDir%/_supermap-10x-active.ditamap" -o "%teamcity.build.checkoutDir%/out/zip" --use-doc-portal-params "no" -f "webhelp_Guidewire"
                
                duration=${'$'}SECONDS
                echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest"
        }
        script {
            name = "Copy PDF from online to offline output"
            id = "COPY_PDF_FROM_ONLINE_TO_OFFLINE_OUTPUT"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                cp -avR "%teamcity.build.checkoutDir%/out/pdf" "%teamcity.build.checkoutDir%/out/zip"
            """.trimIndent()
        }
        script {
            name = "Build a ZIP package"
            id = "BUILD_A_ZIP_PACKAGE"
            scriptContent = """
                #!/bin/bash
                set -xe
                
                echo "Creating a ZIP package"
                cd "%teamcity.build.checkoutDir%/out/zip"
                zip -r "%teamcity.build.checkoutDir%/out/docs.zip" * &&
                rm -rf "%teamcity.build.checkoutDir%/out/zip"
            """.trimIndent()
        }
        script {
            name = "Build the webhelpwithpdf output"
            id = "BUILD_THE_WEBHELPWITHPDF_OUTPUT"
            scriptContent = """
                #!/bin/bash
                set -xe
                                
                SECONDS=0
                
                echo "Building output"
                dita -i "%teamcity.build.checkoutDir%/_supermap-10x-active.ditamap" -o "%teamcity.build.checkoutDir%/out" --filter "%teamcity.build.checkoutDir%/IS-PC-OnPrem-Release.ditaval" -f "wh-pdf" --dita.ot.pdf.format "pdf5_Guidewire" --use-doc-portal-params "yes" --gw-doc-id "pc1020" --generate.build.data "yes" --git.url "ssh://git@stash.guidewire.com/docsources/insurancesuite-10x.git" --git.branch "release/10.2.0"
                
                duration=${'$'}SECONDS
                echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
            """.trimIndent()
            dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
            dockerImage = "artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest"
        }
        script {
            name = "Copy resources from git to the doc output dir (0)"
            id = "COPY_RESOURCES_FROM_GIT_TO_THE_DOC_OUTPUT_DIR_(0)"
            scriptContent = """
                #!/bin/bash
                set -xe
                        
                git clone --single-branch --branch master ssh://git@stash.guidewire.com/docsources/insurancesuite-extras.git resource0
                        
                echo "Copying files to the doc output dir"
                mkdir -p %teamcity.build.checkoutDir%/out/extras/ReleaseNotes-files/pc/10.x
                cp -R ./resource0/ReleaseNotes-files/pc/10.x/* %teamcity.build.checkoutDir%/out/extras/ReleaseNotes-files/pc/10.x
            """.trimIndent()
        }
        script {
            name = "Copy resources from git to the doc output dir (1)"
            id = "COPY_RESOURCES_FROM_GIT_TO_THE_DOC_OUTPUT_DIR_(1)"
            scriptContent = """
                #!/bin/bash
                set -xe
                        
                git clone --single-branch --branch master ssh://git@stash.guidewire.com/docsources/insurancesuite-extras.git resource1
                        
                echo "Copying files to the doc output dir"
                mkdir -p %teamcity.build.checkoutDir%/out/extras/ReleaseNotes-files/cm/10.x
                cp -R ./resource1/ReleaseNotes-files/cm/10.x/* %teamcity.build.checkoutDir%/out/extras/ReleaseNotes-files/cm/10.x
            """.trimIndent()
        }
    }
    steps {
        insert(0) {
            script {
                name = "Build the webhelpwithpdf output"
                id = "BUILD_THE_WEBHELPWITHPDF_OUTPUT"
                scriptContent = """
                    #!/bin/bash
                    set -xe
                                    
                    SECONDS=0
                    
                    echo "Building output"
                    dita -i "%teamcity.build.checkoutDir%/_supermap-10x-active.ditamap" -o "%teamcity.build.checkoutDir%/out" --filter "%teamcity.build.checkoutDir%/IS-PC-OnPrem-Release.ditaval" -f "wh-pdf" --dita.ot.pdf.format "pdf5_Guidewire" --use-doc-portal-params "yes" --gw-doc-id "pc1020" --generate.build.data "yes" --git.url "ssh://git@stash.guidewire.com/docsources/insurancesuite-10x.git" --git.branch "release/10.2.0"
                    
                    duration=${'$'}SECONDS
                    echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
                """.trimIndent()
                dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
                dockerImage = "artifactory.guidewire.com/doctools-docker-dev/dita-ot:latest"
            }
        }
        items.removeAt(1)
        items.removeAt(1)
        items.removeAt(1)
        update<ScriptBuildStep>(1) {
            id = "BUILD_THE_WEBHELP_OUTPUT"
            clearConditions()
            scriptContent = """
                #!/bin/bash
                set -xe
                                
                SECONDS=0
                
                echo "Building output"
                dita -i "%teamcity.build.checkoutDir%/_supermap-10x-active.ditamap" -o "%teamcity.build.checkoutDir%/out/zip" --verbose --use-doc-portal-params "no" -f "webhelp_Guidewire"
                
                duration=${'$'}SECONDS
                echo "BUILD FINISHED AFTER ${'$'}((${'$'}duration / 60)) minutes and ${'$'}((${'$'}duration % 60)) seconds"
            """.trimIndent()
        }
        items.removeAt(4)
        insert(6) {
            script {
                name = "Upload content to the S3 bucket"
                id = "UPLOAD_CONTENT_TO_THE_S3_BUCKET"
                scriptContent = """
                    #!/bin/bash
                    set -xe
                    
                    aws s3 sync "%teamcity.build.checkoutDir%/out" s3://tenant-doctools-staging-builds/self-managed/pc/1020 --delete
                """.trimIndent()
            }
        }
        insert(7) {
            script {
                name = "Get config file"
                id = "GET_CONFIG_FILE"
                scriptContent = """
                    #!/bin/bash
                    set -xe
                    
                    export CONFIG_FILE="%teamcity.build.workingDir%/config.json"
                    export TMP_CONFIG_FILE="%teamcity.build.workingDir%/tmp_config.json"
                    export CONFIG_FILE_URL="https://ditaot.internal.staging.ccs.guidewire.net/portal-config/config.json"
                    
                    curl ${'$'}CONFIG_FILE_URL > ${'$'}TMP_CONFIG_FILE
                    
                    if [[ "staging" == "prod" ]]; then
                        cat ${'$'}TMP_CONFIG_FILE | jq -r '{"docs": [.docs[] | select(.url | startswith("portal/secure/doc") | not)]}' > ${'$'}CONFIG_FILE                 
                    elif [[ "staging" == "portal2" ]]; then
                        cat ${'$'}TMP_CONFIG_FILE | jq -r '{"docs": [.docs[] | select(.url | startswith("portal/secure/doc"))]}' > ${'$'}CONFIG_FILE
                    else
                        cat ${'$'}TMP_CONFIG_FILE > ${'$'}CONFIG_FILE
                    fi
                """.trimIndent()
            }
        }
        insert(8) {
            script {
                name = "Run the doc crawler"
                id = "RUN_THE_DOC_CRAWLER"
                scriptContent = """
                    #!/bin/bash
                    set -xe
                    
                    export INDEX_NAME="gw-docs"
                    export CONFIG_FILE="%teamcity.build.workingDir%/config.json"
                    export DOC_ID="pc1020"
                    export DOC_S3_URL="https://ditaot.internal.staging.ccs.guidewire.net"
                    export ELASTICSEARCH_URLS="https://docsearch-doctools.staging.ccs.guidewire.net"
                    export APP_BASE_URL="https://docs.staging.ccs.guidewire.net"
                    
                    cat > scrapy.cfg <<- EOM
                    [settings]
                    default = doc_crawler.settings
                    EOM
                    
                    doc_crawler
                """.trimIndent()
                dockerImagePlatform = ScriptBuildStep.ImagePlatform.Linux
                dockerImage = "artifactory.guidewire.com/doctools-docker-dev/doc-crawler:latest"
            }
        }
    }
}
