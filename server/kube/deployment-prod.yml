apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docportal-app-static-pv-claim-${DEPLOY_ENV}
  namespace: doctools
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    tags.datadoghq.com/env: atmos-${DEPLOY_ENV}
    tags.datadoghq.com/service: docportal
    tags.datadoghq.com/version: ${TAG_VERSION}
    app: docportal-app
  name: docportal-app-deployment
  namespace: doctools
spec:
  selector:
    matchLabels:
      app: docportal-app
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        tags.datadoghq.com/env: atmos-${DEPLOY_ENV}
        tags.datadoghq.com/service: docportal
        tags.datadoghq.com/version: ${TAG_VERSION}
        app: docportal-app
      annotations:
        iam.amazonaws.com/role: arn:aws:iam::710503867599:role/aws_gwre-ccs-prod_tenant_doctools_developer
    spec:
      containers:
        - name: docportal
          image: 710503867599.dkr.ecr.us-east-2.amazonaws.com/tenant-doctools-docportal:${TAG_VERSION}
          command: [ \"/bin/sh\", \"-c\" ]
          args: [ \"until wget -qO- http://localhost:15000/server_info | grep '\\\"state\\\": \\\"LIVE\\\"'; do echo 'Waiting for Istio sidecar'; sleep 1 ; done ; echo 'istio sidecar available'; npm start\" ]
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
          livenessProbe:
            httpGet:
              path: /alive
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 45
          readinessProbe:
            httpGet:
              path: /alive
              port: 8081
            initialDelaySeconds: 150
            periodSeconds: 45
          env:
            - name: REFRESH_IMAGE
              value: 'BUILD_TIME'
            - name: OKTA_DOMAIN
              value: ${OKTA_DOMAIN_PROD}
            - name: OKTA_IDP
              value: ${OKTA_IDP_PROD}
            - name: GW_COMMUNITY_CUSTOMER_IDP
              value: ${GW_COMMUNITY_CUSTOMER_IDP_PROD}
            - name: GW_COMMUNITY_PARTNER_IDP
              value: ${GW_COMMUNITY_PARTNER_IDP_PROD}
            - name: OKTA_CLIENT_ID
              value: ${OKTA_CLIENT_ID_PROD}
            - name: OKTA_CLIENT_ID_APAC
              value: ${OKTA_CLIENT_ID_PROD_APAC}
            - name: OKTA_CLIENT_ID_EMEA
              value: ${OKTA_CLIENT_ID_PROD_EMEA}
            - name: OKTA_CLIENT_SECRET
              value: ${OKTA_CLIENT_SECRET_PROD}
            - name: OKTA_CLIENT_SECRET_APAC
              value: ${OKTA_CLIENT_SECRET_PROD_APAC}
            - name: OKTA_CLIENT_SECRET_EMEA
              value: ${OKTA_CLIENT_SECRET_PROD_EMEA}
            - name: OKTA_ACCESS_TOKEN_ISSUER
              value: ${OKTA_ACCESS_TOKEN_ISSUER_PROD}
            - name: OKTA_ACCESS_TOKEN_ISSUER_APAC
              value: ${OKTA_ACCESS_TOKEN_ISSUER_PROD_APAC}
            - name: OKTA_ACCESS_TOKEN_ISSUER_EMEA
              value: ${OKTA_ACCESS_TOKEN_ISSUER_PROD_EMEA}
            - name: OKTA_ACCESS_TOKEN_SCOPES
              value: ${OKTA_ACCESS_TOKEN_SCOPES_PROD}
            - name: OKTA_ACCESS_TOKEN_AUDIENCE
              value: ${OKTA_ACCESS_TOKEN_AUDIENCE_PROD}
            - name: APP_BASE_URL
              value: https://docs.guidewire.com
            - name: SESSION_KEY
              value: ${SESSION_KEY}
            - name: ELASTIC_SEARCH_URL
              value: http://docsearch-${DEPLOY_ENV}.doctools:9200
            - name: DOC_S3_URL
              value: https://ditaot.internal.${DEPLOY_ENV}.service.guidewire.net
            - name: PORTAL2_S3_URL
              value: https://portal2.internal.us-east-2.service.guidewire.net
            - name: ALLOW_PUBLIC_DOCS
              value: 'yes'
            - name: ENABLE_AUTH
              value: 'yes'
            - name: JIRA_AUTH_TOKEN
              value: 'c3lzLWVzLXBvcnRhbEBndWlkZXdpcmUuY29tOnJRd2l4WVZuTEtMNmZVY0x0Zjk2OEMxNw=='
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_HTTP_CLIENT_TAG_QUERY_STRING
              value: 'true'
            - name: DD_HTTP_SERVER_TAG_QUERY_STRING
              value: 'true'
            - name: DD_SERVICE_MAPPING
              value: "nodejs:atmos-${DEPLOY_ENV}-docportal-app"
            - name: DD_LOGS_INJECTION
              value: 'true'
            - name: DD_PROFILING_ENABLED
              value: 'true'
            - name: DD_TAGS
              value: layer:webapp, team:doctools
            - name: DD_TRACE_ANALYTICS_ENABLED
              value: 'true'
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_PROPAGATION_STYLE_INJECT
              value: "Datadog,B3"
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "1Gi"
              cpu: "1"
          volumeMounts:
            - mountPath: "/usr/src/app/static"
              name: static-storage
      volumes:
        - name: static-storage
          persistentVolumeClaim:
            claimName: docportal-app-static-pv-claim-${DEPLOY_ENV}
      imagePullSecrets:
        - name: artifactory-secret