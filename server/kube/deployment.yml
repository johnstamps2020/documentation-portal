apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: ${APP_NAME}-secret-store
  namespace: ${POD_NAME}
  labels:
    app: ${APP_NAME}
    gwcp.guidewire.com/dept: \"${DEPT_CODE}\"
    gwcp.guidewire.com/maintained-by: ${POD_NAME}
    gwcp.guidewire.com/created-by: ${POD_NAME}
    gwcp.guidewire.com/tenant-name: ${POD_NAME}
    gwcp.guidewire.com/version: ${TAG_VERSION}
    gwcp.guidewire.com/app-name: ${APP_NAME}
spec:
  retrySettings:
    maxRetries: 5
    retryInterval: \"10s\"
  provider:
    aws:
      role: ${AWS_ROLE}
      service: SecretsManager
      region: ${AWS_DEFAULT_REGION}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ${APP_NAME}-external-secret
  namespace: ${POD_NAME}
  labels:
    app: ${APP_NAME}
    gwcp.guidewire.com/dept: \"${DEPT_CODE}\"
    gwcp.guidewire.com/maintained-by: ${POD_NAME}
    gwcp.guidewire.com/created-by: ${POD_NAME}
    gwcp.guidewire.com/tenant-name: ${POD_NAME}
    gwcp.guidewire.com/version: ${TAG_VERSION}
    gwcp.guidewire.com/app-name: ${APP_NAME}
spec:
  secretStoreRef:
    name: ${APP_NAME}-secret-store
    kind: SecretStore
  target:
    name: ${APP_NAME}-external-secret
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: tenant-doctools-docportal
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ${APP_NAME}-pdb
  namespace: ${POD_NAME}
  labels:
    app: ${APP_NAME}
    gwcp.guidewire.com/dept: \"${DEPT_CODE}\"
    gwcp.guidewire.com/maintained-by: ${POD_NAME}
    gwcp.guidewire.com/created-by: ${POD_NAME}
    gwcp.guidewire.com/tenant-name: ${POD_NAME}
    gwcp.guidewire.com/version: ${TAG_VERSION}
    gwcp.guidewire.com/app-name: ${APP_NAME}
spec:
  minAvailable: ${PDB_MIN_AVAILABLE}
  selector:
    matchLabels:
      app: ${APP_NAME}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-deployment
  namespace: ${POD_NAME}
  labels:
    tags.datadoghq.com/env: atmos-${DEPLOY_ENV}
    tags.datadoghq.com/service: ${DD_SERVICE_NAME}
    tags.datadoghq.com/version: ${TAG_VERSION}
    app: ${APP_NAME}
    gwcp.guidewire.com/dept: \"${DEPT_CODE}\"
    gwcp.guidewire.com/maintained-by: ${POD_NAME}
    gwcp.guidewire.com/created-by: ${POD_NAME}
    gwcp.guidewire.com/tenant-name: ${POD_NAME}
    gwcp.guidewire.com/version: ${TAG_VERSION}
    gwcp.guidewire.com/app-name: ${APP_NAME}
spec:
  selector:
    matchLabels:
      app: ${APP_NAME}
  # If you change the number of replicas, you have to update the step for checking pod status in settings.kts.
  replicas: ${NUMBER_OF_REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      name: ${APP_NAME}-deployment
      namespace: ${POD_NAME}
      labels:
        tags.datadoghq.com/env: atmos-${DEPLOY_ENV}
        tags.datadoghq.com/service: ${DD_SERVICE_NAME}
        tags.datadoghq.com/version: ${TAG_VERSION}
        app: ${APP_NAME}
        gwcp.guidewire.com/dept: \"${DEPT_CODE}\"
        gwcp.guidewire.com/maintained-by: ${POD_NAME}
        gwcp.guidewire.com/created-by: ${POD_NAME}
        gwcp.guidewire.com/tenant-name: ${POD_NAME}
        gwcp.guidewire.com/version: ${TAG_VERSION}
        gwcp.guidewire.com/app-name: ${APP_NAME}
      annotations:
        iam.amazonaws.com/role: ${AWS_ROLE}
    spec:
      containers:
        - name: docportal
          image: ${AWS_ECR_REPO}:${TAG_VERSION}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sleep
                  - '30'
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
          livenessProbe:
            httpGet:
              path: /alive
              port: 8081
            initialDelaySeconds: 300
            periodSeconds: 120
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /alive
              port: 8081
            initialDelaySeconds: 300
            periodSeconds: 120
            timeoutSeconds: 10
          env:
            - name: REFRESH_IMAGE
              value: 'BUILD_TIME'
            - name: NODE_ENV
              value: ${NODE_ENV}
            - name: OKTA_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: okta_client_id
            - name: OKTA_CLIENT_ID_APAC
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: okta_client_id_apac
            - name: OKTA_CLIENT_ID_EMEA
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: okta_client_id_emea
            - name: OKTA_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: okta_client_secret
            - name: OKTA_CLIENT_SECRET_APAC
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: okta_client_secret_apac
            - name: OKTA_CLIENT_SECRET_EMEA
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: okta_client_secret_emea
            - name: OKTA_ISSUER
              value: ${OKTA_ISSUER}
            - name: OKTA_ISSUER_APAC
              value: ${OKTA_ISSUER_APAC}
            - name: OKTA_ISSUER_EMEA
              value: ${OKTA_ISSUER_EMEA}
            - name: OKTA_SCOPES
              value: ${OKTA_SCOPES}
            - name: OKTA_ADMIN_GROUPS
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: okta_admin_groups
            - name: OKTA_AUDIENCE
              value: ${OKTA_AUDIENCE}
            - name: POWER_USERS
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: power_users
            - name: APP_BASE_URL
              value: ${APP_BASE_URL}
            - name: SESSION_KEY
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: session_key
            - name: FRONTEND_URL
              value: ${FRONTEND_URL}
            - name: ELASTIC_SEARCH_URL
              value: ${ELASTIC_SEARCH_URL}
            - name: DOC_S3_URL
              value: ${DOC_S3_URL}
            - name: PORTAL2_S3_URL
              value: ${PORTAL2_S3_URL}
            - name: PARTNERS_LOGIN_URL
              value: ${PARTNERS_LOGIN_URL}
            - name: PARTNERS_LOGIN_CERT
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: partners_login_cert
            - name: PARTNERS_LOGIN_SERVICE_PROVIDER_ENTITY_ID
              value: ${PARTNERS_LOGIN_SERVICE_PROVIDER_ENTITY_ID}
            - name: CUSTOMERS_LOGIN_URL
              value: ${CUSTOMERS_LOGIN_URL}
            - name: CUSTOMERS_LOGIN_CERT
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: customers_login_cert
            - name: CUSTOMERS_LOGIN_SERVICE_PROVIDER_ENTITY_ID
              value: ${CUSTOMERS_LOGIN_SERVICE_PROVIDER_ENTITY_ID}
            - name: ALLOW_PUBLIC_DOCS
              value: 'yes'
            - name: ENABLE_AUTH
              value: '${ENABLE_AUTH}'
            - name: DEPLOY_ENV
              value: '${DEPLOY_ENV}'
            - name: JIRA_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: jira_auth_token
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_HTTP_CLIENT_TAG_QUERY_STRING
              value: 'true'
            - name: DD_HTTP_SERVER_TAG_QUERY_STRING
              value: 'true'
            - name: DD_SERVICE_MAPPING
              value: 'nodejs:atmos-${DEPLOY_ENV}-${APP_NAME}'
            - name: DD_LOGS_INJECTION
              value: 'false'
            - name: DD_PROFILING_ENABLED
              value: 'true'
            - name: DD_TAGS
              value: layer:webapp, team:${POD_NAME}
            - name: DD_TRACE_ANALYTICS_ENABLED
              value: 'true'
            - name: DD_TRACE_STARTUP_LOGS
              value: 'true'
            - name: DD_TRACE_SAMPLE_RATE
              value: "0.1"
            - name: DD_TRACE_RATE_LIMIT
              value: 10
            - name: DD_USE_DOGSTATSD
              value: 'true'
            - name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
              value: 'true'
            - name: DD_DOGSTATSD_PORT
              value: '8125'
            - name: DD_RUNTIME_METRICS_ENABLED
              value: 'true'
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENTITY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: DD_PROPAGATION_STYLE_INJECT
              value: 'Datadog,B3'
            - name: CONFIG_DB_HOST
              value: ${CONFIG_DB_HOST}
            - name: CONFIG_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: config_db_name
            - name: CONFIG_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: config_db_username
            - name: CONFIG_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: config_db_password
            - name: AWS_REGION
              value: ${AWS_REGION}
            - name: ML_TRANSFORMER_URL
              value: ${ML_TRANSFORMER_URL}
            - name: GW_GPT_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: gw_gpt_client_id
            - name: GW_GPT_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-external-secret
                  key: gw_gpt_client_secret
          resources:
            requests:
              memory: \"${REQUESTS_MEMORY}\"
              cpu: \"${REQUESTS_CPU}\"
            limits:
              memory: \"${LIMITS_MEMORY}\"
              cpu: \"${LIMITS_CPU}\"
---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-service
  namespace: ${POD_NAME}
  labels:
    app: ${APP_NAME}
    gwcp.guidewire.com/dept: \"${DEPT_CODE}\"
    gwcp.guidewire.com/maintained-by: ${POD_NAME}
    gwcp.guidewire.com/created-by: ${POD_NAME}
    gwcp.guidewire.com/tenant-name: ${POD_NAME}
    gwcp.guidewire.com/version: ${TAG_VERSION}
    gwcp.guidewire.com/app-name: ${APP_NAME}
spec:
  ports:
    - name: http
      port: 8081
  selector:
    app: ${APP_NAME}
