<!DOCTYPE html>
<html lang="en">
<%- include('parts/head', { pageTitle: `${searchPhrase} | ${totalNumOfResults} search results`}) %>
<body>
<%- include('parts/header', { hideSearchBox: true, hideLoginButton: false, headerClass: 'header-search' }) %>
<main class="fullWidth searchPage">
    <div class="filterSearchResults">
        <div>
            <div id="expandCollapseAllToggle">
                <span onclick="expandCollapseAllFilters(expandElements=true)" role="button" tabindex="0">
                    Expand all
                </span>
                <span onclick="expandCollapseAllFilters(expandElements=false)" role="button" tabindex="0">
                    Collapse all
                </span>
                <span onclick="clearFilters()" role="button" tabindex="0">
                    Clear filters
                </span>
            </div>
            <% filters.forEach(matchingFilter => { %>
                <% const filterValues = matchingFilter.values %>
                <details class="expandableSection" open>
                    <summary>
                        <span class="summaryContainer">
                            <span class="summaryChevron" aria-label="expand/collapse icon"></span>
                            <%= matchingFilter.name.replace('_', ' ') %> (<%= filterValues.length %>)
                        </span>
                    </summary>
                    <div class="expandableSectionValues">
                        <% let sortedFilterValues = filterValues.sort(function (a, b) {
                            var labelA = a.label.toUpperCase();
                            var labelB = b.label.toUpperCase();
                            return (labelA < labelB) ? -1 : (labelA > labelB) ? 1 : 0;
                        })
                            if (matchingFilter.name === 'version') {
                                sortedFilterValues = filterValues
                                        .sort(function (a, b) {
                                            const verNum = label =>
                                                    label
                                                            .split('.')
                                                            .map(n => +n + 100000)
                                                            .join('.');
                                            const verNumA = verNum(a.label);
                                            const verNumB = verNum(b.label);
                                            let comparison = 0;
                                            if (verNumA > verNumB) {
                                                comparison = 1;
                                            } else if (verNumA < verNumB) {
                                                comparison = -1;
                                            }
                                            return comparison;
                                        })
                                        .reverse()
                            } %>
                        <% sortedFilterValues.forEach(checkboxValue => { %>
                            <label class="checkboxRowContainer">
                                <input type="checkbox" class="filterCheckbox" name="<%= matchingFilter.name %>"
                                       value="<%= checkboxValue.label %>"
                                <% if (checkboxValue.checked) { %>
                                       checked="true"
                                        <% } %>
                                />
                                <span class="filterLabel"><%= checkboxValue.label %></span>
                                <span class="docCount"><%= checkboxValue.doc_count %></span>
                            </label>
                        <% }) %>
                    </div>
                </details>
            <% }) %>
        </div>
    </div>
    <div class="resultWrapper">
        <% if (!userContext) { %>
            <div class="notLoggedInWarning">
                You are not logged in. Search results are limited to public
                documents only.
            </div>
        <% } %>
        <div class="searchBoxWrapper">
            <form action="/search">
                <div class="searchWrapperLarge">
                    <input
                            name="q"
                            value="<%= searchPhrase %>"
                            id="searchField"
                            class="searchField"
                            type="search"
                            placeholder="Search Guidewire documentation"
                            aria-label="Search Guidewire documentation"
                            aria-labelledby="submitSearch"
                            autofocus
                    />

                    <% if (Object.keys(filtersFromUrl).length > 0) { %>
                        <% for (const [searchFilterName, searchFilterValues] of Object.entries(filtersFromUrl)) { %>
                            <input type="hidden" name="<%= searchFilterName %>"
                                   value="<%= searchFilterValues.join(',') %>"/>
                        <% } %>
                    <% } %>
                    <button id="submitSearch" type="submit" class="searchButton" aria-label="Search">
                        Search
                    </button>
                </div>
            </form>
            <%- include('parts/advanced-search') %>
        </div>
        <% if (totalNumOfResults > 0) { %>
            <h1>Search results for "<%= searchPhrase %>"
                <span id="highlightToggle" role="button"
                      onclick="enableDisableHighlight()" aria-label="Toggle search highlights"
                      title="Toggle search highlights"></span>
            </h1>
            <div class="resultsSubheading">
                <span class="resultCount">
                    <%= totalNumOfResults %> <%= totalNumOfResults === 1 ? 'result' : 'results' %>
                    <% var totalNumOfCheckedFilters = 0 %>
                    <div class="resultBadges">
                    Applied filters:
                        <% filters.forEach(searchFilter => { %>
                            <% const checkedFilters = searchFilter.values.filter(filterValue => filterValue.checked) %>
                            <% if (checkedFilters.length > 0) { %>
                                <% totalNumOfCheckedFilters += checkedFilters.length %>
                                <% checkedFilters.forEach(f => { %>
                                    <span class="infoLabel"><%= f.label %></span>
                                <% }) %>
                            <% } %>
                        <% }) %>
                        <% if (totalNumOfCheckedFilters === 0) { %>
                            <span class="infoLabel">None</span>
                        <% } %>
                    </div>
                </span>
                <span class="paginationWrapper">
                    <label for="pagination">View items:</label>
                    <select id="pagination">
                        <% ['10', '25', '50', '100'].forEach(rpp => { %>
                            <option value="<%= rpp %>" <%= resultsPerPage === `${rpp}` ? 'selected' : '' %>><%= rpp %></option>
                        <% }) %>
                    </select>
                </span>
            </div>
            <div class="searchResults" id="searchResults">
                <% searchResults.forEach(result => { %>
                    <div class="searchResult">
                        <a href="<%= result.uniqueHighlightTerms
                                ? `${result.href}?hl=${result.uniqueHighlightTerms}`
                                : result.href %>">
                            <h2 class="searchResultTitle">
                                <%- result.title %>
                            </h2>
                        </a>
                        <div class="resultBadges">
                            <% result.docTags.forEach(tag => {
                            if (tag) {
                            if (Array.isArray(tag)) {
                            tag.forEach(value => { %>
                                <span class="infoLabel"><%= value %></span>
                            <% }) %>
                            <% } else { %>
                                <span class="infoLabel"><%= tag %></span>
                            <% } %>
                            <% } %>
                            <% }) %>
                        </div>
                        <div class="resultBody"><%- result.body %></div>
                        <% const innerHits = result.innerHits
                        if (innerHits.length > 0) { %>
                            <details class="expandableSection">
                                <summary>
                                    <span class="summaryContainer">
                                        <span class="summaryChevron" aria-label="expand/collapse icon"></span>
                                        <%= `Also found in ${innerHits.length} pages with the same title` %>
                                    </span>
                                </summary>
                                <div class="expandableSectionValues">
                                    <% for (const hit of innerHits) { %>
                                        <p class="otherHit">
                                            <a href="<%= result.uniqueHighlightTerms ? `${hit.href}?hl=${result.uniqueHighlightTerms}` : hit.href %>">
                                                <%= hit.tags.join(', ') %>
                                            </a>
                                        </p>
                                    <% } %>
                                </div>
                            </details>
                        <% } %>
                    </div>
                <% }) %>
            </div>
            <% if (pages > 1) { %>
                <ul class="pagination">
                    <% if (Number(currentPage) !== 1) { %>
                        <li>
                            <button onclick="setUrlParam('page', '1')">&lt;&lt; First</button>
                        </li>
                    <% } %>
                    <% if (Number(currentPage) !== 1) { %>
                        <li>
                            <button onclick="changePage(false)">&lt; Previous</button>
                        </li>
                    <% } %>
                    <% if (Number(currentPage) % 10 === 0) {
                        var pageRangeMinInit = Number(currentPage) - 9
                    } else {
                        var pageRangeMinInit = Math.floor(Number(currentPage) / 10) * 10 + 1
                    }
                        var pageRangeMin = (Number(currentPage) - 5 > 0) ? (Number(currentPage) - 5) : pageRangeMinInit;
                        var pageRangeMax = (pageRangeMin + 9 <= pages) ? (pageRangeMin + 9) : pages;
                        if (pageRangeMax === pages) {
                            for (i = pageRangeMin; i >= 1 && i >= pageRangeMax - 9; i--) {
                                pageRangeMin = i;
                            }
                        }
                    for (i = pageRangeMin; i <= pageRangeMax; i++)
                    {
                    if (i === Number(currentPage)) { %>
                        <li class="selected"><%= i %></li>
                    <% } else { %>
                        <li>
                            <button onclick="setUrlParam('page', <%= i %>)">
                                <%= i %>
                            </button>
                        </li>
                    <% } %>
                    <% } %>
                    <% if (Number(currentPage) !== pages) { %>
                        <li>
                            <button onclick="changePage(true)">
                                Next &gt;
                            </button>
                        </li>
                    <% } %>
                    <% if (Number(currentPage) !== pages) { %>
                        <li>
                            <button onclick="setUrlParam('page', <%= pages %>)">
                                Last &gt;&gt;
                            </button>
                        </li>
                    <% } %>
                </ul>
            <% } %>
        <% } else { %>
            <h1>Sorry, your search for "<%= searchPhrase %>" returned no results.</h1>
            <% if (Object.keys(filtersFromUrl).length > 0) { %>
                <div class="resultsSubheading">
                    <div class="resultBadges">
                        Search filters:
                        <% for (const [searchFilterName, searchFilterValues] of Object.entries(filtersFromUrl)) { %>
                            <% searchFilterValues.forEach(v => { %>
                                <span class="infoLabel"><%= v %></span>
                            <% }) %>
                        <% } %>
                    </div>
                </div>
                <div class="buttonWrapper">
                        <span class="mediumButton" onclick="clearFilters()" role="button" tabindex="0">
                            Clear filters and search again
                        </span>
                </div>
            <% } else { %>
                <div class="resultsSubheading">
                    <div class="resultBadges">
                        Search filters:
                        <span class="infoLabel">None</span>
                    </div>
                </div>
            <% } %>
    </div>
    <% } %>
    </div>
</main>
<script>
    const url = new URL(window.location.href);
    const queryString = url.search;
    const searchParams = new URLSearchParams(queryString);

    function setUrlParam(paramName, paramValue) {
        if (('' + paramValue).length === 0) {
            if (searchParams.has(paramName)) {
                searchParams.delete(paramName);
            }
        } else {
            if (searchParams.has(paramName)) {
                searchParams.set(paramName, paramValue)
            } else {
                searchParams.append(paramName, paramValue);
            }
        }

        if (paramName !== 'page' && searchParams.has('page')) {
            searchParams.delete('page');
        }

        url.search = searchParams.toString();
        window.location.href = url.toString();
    }

    function updateFilters(e) {
        const neighbors = document.getElementsByName(e.target.name);
        let selectedValues = [];
        Array.prototype.forEach.call(neighbors, function (cb) {
            if (cb.checked) {
                selectedValues.push(cb.value);
            }
        });

        setUrlParam(e.target.name, encodeURI(selectedValues.join(',')));
    }

    const pagination = document.getElementById('pagination');
    if (pagination) {
        pagination.addEventListener('change', function (e) {
            const selectTag = e.target;
            if (selectTag.selectedIndex !== -1) {
                const selectedValue = selectTag.options[selectTag.selectedIndex].value;
                setUrlParam('pagination', selectedValue);
            }
        });
    }

    function changePage(forward) {
        if (forward) {
            if (searchParams.has('page')) {
                searchParams.set('page', parseInt(searchParams.get('page')) + 1);
            } else {
                searchParams.set('page', 2);
            }
        } else {
            searchParams.set('page', parseInt(searchParams.get('page')) - 1);
        }

        url.search = searchParams.toString();
        window.location.href = url.toString();
    }

    const allBoxes = document.getElementsByClassName('filterCheckbox');
    if (allBoxes) {
        Array.prototype.forEach.call(allBoxes, function (box) {
            box.addEventListener('change', updateFilters, false);
        });
    }

    function expandCollapseAllFilters(expandElements) {
        const expandableFiltersElements = document.querySelectorAll('div.filterSearchResults .expandableSection');
        for (const expandableFilter of expandableFiltersElements) {
            expandElements ? expandableFilter.setAttribute('open', '') : expandableFilter.removeAttribute('open');
        }
    }

    function clearFilters() {
        const filters = [<%- filters.map(f => `'${f.name}'`) %>];
        for (const filter of filters) {
            if (searchParams.has(filter)) {
                searchParams.delete(filter);
            }
        }

        url.search = searchParams.toString();
        window.location.href = url.toString();
    }

    function enableDisableHighlight() {
        const highlightToggleElement = document.getElementById('highlightToggle');
        const highlightedElements = document.getElementsByClassName('searchResultHighlight');
        if (highlightToggleElement.classList.contains('highlightDisabled')) {
            highlightToggleElement.classList.remove('highlightDisabled')
            for (const highlightedElement of highlightedElements) {
                highlightedElement.classList.add('highlighted');
            }
        } else {
            highlightToggleElement.classList.add('highlightDisabled')
            for (const highlightedElement of highlightedElements) {
                highlightedElement.classList.remove('highlighted');
            }
        }
    }

</script>
</body>
<%- include('parts/footer', { footerClass: 'footer-search' }) %>
</html>
