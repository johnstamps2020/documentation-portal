{
  "components": {
    "parameters": {
      "billingPlanId": {
        "description": "The REST identifier for the billing plan (Since 1.4.0)",
        "in": "path",
        "name": "billingPlanId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "delinquencyPlanId": {
        "description": "The REST identifier for the delinquency plan (Since 1.4.0)",
        "in": "path",
        "name": "delinquencyPlanId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "enablePolymorphism": {
        "description": "Whether or not to use the `discriminator`/`oneOf` pattern to output schemas in cases where the valid set of fields can vary based on some attribute of the data such as the country or subtype.  Defaults to `true`. See the documentation for more information.",
        "in": "query",
        "name": "enablePolymorphism",
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "fields": {
        "description": "Allows the caller to specify the set of fields that should be included on the response. This can be used to limit the set of fields returned as well as to include optional fields that otherwise wouldn't normally be returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field list>`, where `<field list>` consists of a comma-separated list of field or field set names. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "fields",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "filter": {
        "description": "Filters the list of results based on the specified field, operator, and value. The parameter is either of the form `filter=<field>:<operator>:<value>` or `filter=<include>:<field>:<operator>:<value>`. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "filter",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "filterByUser": {
        "description": "Whether or not to filter endpoints and schema properties by the authorization of the caller. Defaults to `false`.",
        "in": "query",
        "name": "filterByUser",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "groupId": {
        "description": "The REST identifier for the group (Since 1.4.0)",
        "in": "path",
        "name": "groupId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "groupUserId": {
        "description": "The REST identifier for the group user (Since 1.4.0)",
        "in": "path",
        "name": "groupUserId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "gwLanguageHeader": {
        "description": "If specified, this header will set the language used when processing the request",
        "in": "header",
        "name": "GW-Language",
        "schema": {
          "type": "string"
        }
      },
      "gwLocaleHeader": {
        "description": "If specified, this header will set the locale used when processing the request",
        "in": "header",
        "name": "GW-Locale",
        "schema": {
          "type": "string"
        }
      },
      "gwSchemaProperty": {
        "description": "If specified and the operation returns json with a defined schema, this will add a property, '$GW-Schema',  with the fully qualified name of the object's schema.",
        "in": "header",
        "name": "GW-IncludeSchemaProperty",
        "schema": {
          "type": "boolean"
        }
      },
      "gwTraceability": {
        "description": "This header permits a customer to trace a request from its initial reception through all of the subsequent applications that were invoked to handle that request. The actual traceability id present in the MDC and logs (and returned in the response), is dependent on the implementation of TraceabilityIDPlugin. The default implementation uses this value, if specified, or a generated UID.  However, another implementation may always generate a unique id and just log  the relationship between these incoming values and the generated UID. Note: that this header can be repeated, but the resulting string will just be the comma separated values.",
        "in": "header",
        "name": "X-Correlation-ID",
        "schema": {
          "type": "string"
        }
      },
      "gwTransactionID": {
        "description": "If specified and this operation results in a database commit, this header's value must not have been submitted before.  This value must be globally unique across all clients, apis and webservices. It is used for those transaction that are not idempotent. Unless this is explicitly referenced for an operation it is not required.",
        "in": "header",
        "name": "GW-DBTransaction-ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "gwUnknownPropertyHeader": {
        "description": "If specified, this header will drive the behavior for unknown property handling",
        "in": "header",
        "name": "GW-UnknownPropertyHandling",
        "schema": {
          "enum": ["log", "reject", "ignore"],
          "type": "string"
        }
      },
      "gwUnknownQueryParameterHeader": {
        "description": "If specified, this header will drive the behavior for unknown query parameter handling.  Default is to reject them.",
        "in": "header",
        "name": "GW-UnknownQueryParamHandling",
        "schema": {
          "enum": ["log", "reject", "ignore"],
          "type": "string"
        }
      },
      "gwValidateResponseHandling": {
        "description": "If specified, this header permits the client to override the behavior around validating response",
        "in": "header",
        "name": "GW-ValidateResponseHandling",
        "schema": {
          "type": "boolean"
        }
      },
      "include": {
        "description": "Used to request that additional resources be returned with the API response in the `included` section of the responses. The `include` parameter can appear multiple times, and is a comma-separated list of additional resources to include. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "include",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "includeTotal": {
        "description": "Used to request that results should include a count of the total number of results available, which may be more than the total number of results currently being returned. This parameter is of the form `includeTotal=<true|false>` or `includeTotal=<include>:<true|false>`. If not specified, the default is considered to be `false`. See the documentation for more information about response pagination.",
        "explode": true,
        "in": "query",
        "name": "includeTotal",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "omitInclusions": {
        "description": "Whether or not to omit the `included` properties on request and response schemas.  Defaults to `false`. See the documentation for more information. (Since 1.4.0)",
        "in": "query",
        "name": "omitInclusions",
        "schema": {
          "default": false,
          "type": "boolean"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "pageOffset": {
        "description": "The offset of the first result to fetch when fetching a paginated set of results. The parameter is of the form `pageOffset=<number>` where the first result has an offset of 0. For example, `pageOffset=25` will skip the first 25 results in sorted order. If not specified, the default value is 0. See the documentation for more information about response pagination.",
        "in": "query",
        "name": "pageOffset",
        "schema": {
          "type": "string"
        },
        "x-gw-allowForCompositeApi": true
      },
      "pageSize": {
        "description": "The maximum number of results to return in the response. The parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`. The maximum allowed `pageSize` and the default `pageSize` both depend on the specific API endpoint the request is made to. See the documentation for more information about response pagination.",
        "explode": true,
        "in": "query",
        "name": "pageSize",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "permissionId": {
        "description": "The REST identifier for the role permission (Since 1.4.0)",
        "in": "path",
        "name": "permissionId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "prettyPrintSchema": {
        "description": "Whether or not to pretty-print the returned schema, making it larger but more human readable.  Defaults to `false`.",
        "in": "query",
        "name": "prettyPrint",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "roleId": {
        "description": "The REST identifier for the role (Since 1.4.0)",
        "in": "path",
        "name": "roleId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-gw-sinceVersion": "1.4.0"
      },
      "sort": {
        "description": "Controls the sorting of elements within a response. The sort parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where `<fields>` represents a comma-separated list of field names to sort on. Field names can be prefixed with `-` to request a descending sort, otherwise the sort will be ascending. See the documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "sort",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form",
        "x-gw-allowForCompositeApi": true
      },
      "userId": {
        "description": "The REST identifier for the user",
        "in": "path",
        "name": "userId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "AdminInclusions": {
        "properties": {
          "RolePermission": {
            "items": {
              "$ref": "#/components/schemas/RolePermissionData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BatchRequest": {
        "description": "The body of a batch request",
        "properties": {
          "requests": {
            "description": "The array of subrequests",
            "items": {
              "$ref": "#/components/schemas/BatchSubRequest"
            },
            "title": "Requests",
            "type": "array"
          }
        },
        "required": ["requests"],
        "title": "Batch request",
        "type": "object"
      },
      "BatchResponse": {
        "description": "The body of a response to a batch request. The `responses` field will have one element for every entry in the `requests` field on the request, and responses will appear in the same order.",
        "properties": {
          "responses": {
            "description": "The list of subresponses, appearing in the same order as the elements in the `requests` field of the request",
            "items": {
              "$ref": "#/components/schemas/BatchSubResponse"
            },
            "title": "Responses",
            "type": "array"
          }
        },
        "title": "Batch response",
        "type": "object"
      },
      "BatchSubRequest": {
        "description": "An individual subrequest within a batch request",
        "properties": {
          "body": {
            "description": "The body of the subrequest",
            "title": "Body",
            "type": "object"
          },
          "headers": {
            "description": "Headers that will be included as part of the subrequest. Any headers defined using this field will override header values inherited from the main request. Any headers present on the main request that are not defined in this list will be inherited when the subrequest is made, with the exception of the `GW-Checksum` header.",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "title": "Headers",
            "type": "array"
          },
          "method": {
            "description": "The HTTP method for the subrequest",
            "enum": [
              "delete",
              "head",
              "get",
              "options",
              "patch",
              "post",
              "put"
            ],
            "title": "Method",
            "type": "string"
          },
          "onFail": {
            "description": "Controls whether or not subsequent subrequests are processed if this subrequest fails. The default behavior is to continue processing subrequests. The `abort` option specifies that all subsequent subrequests will be skipped.",
            "enum": ["abort", "continue"],
            "title": "On fail",
            "type": "string"
          },
          "path": {
            "description": "The path for the subrequest. This path is relative to the root of the API hosting the batch endpoint. For example, if the batch endpoint is `<servlet>/rest/common/v1/batch`, then a path of `/activities` will mean a request against `<servlet>/rest/common/v1/activities`. The path must start with `/` and cannot contain whitespace.",
            "minLength": 1,
            "pattern": "^/[\\S]*$",
            "title": "Path",
            "type": "string"
          },
          "query": {
            "description": "The query string to use for the subrequest",
            "title": "Query",
            "type": "string"
          }
        },
        "required": ["method", "path"],
        "title": "Batch subrequest",
        "type": "object"
      },
      "BatchSubResponse": {
        "description": "A subresponse to a batch subrequest",
        "properties": {
          "body": {
            "description": "The body of the subresponse",
            "title": "Body",
            "type": "object"
          },
          "code": {
            "description": "The HTTP status code for the subresponse",
            "title": "Code",
            "type": "integer"
          },
          "headers": {
            "description": "The headers returned for the subresponse",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "title": "Headers",
            "type": "array"
          },
          "skipped": {
            "description": "A `true` value indicates that the corresponding subrequest was not processed due to a prior failed request that specified the `onFail` field with the `abort` option",
            "title": "Skipped",
            "type": "boolean"
          }
        },
        "title": "Batch subresponse",
        "type": "object"
      },
      "BillingPlan": {
        "description": "Billing plan (Since 1.4.0)",
        "properties": {
          "aggregation": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The amount of granularity on the transactions as viewed in the invoice",
            "title": "Aggregation type",
            "x-gw-typelist": "AggregationType"
          },
          "allowModOfManDisb": {
            "description": "Flag to determine if manually created disbursements can have their amounts modified",
            "title": "Allow modification of manual disbursements",
            "type": "boolean"
          },
          "availableDisbAmtType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Defines how to calculate the amount available to disburse automatically, which is compared to DisbursementOver when deciding whether to create a disbursement",
            "title": "Available disbursement amount type",
            "x-gw-typelist": "AvailableDisbAmtType"
          },
          "changeDeadlineIntervalDayCount": {
            "description": "The number of days before the draft date that a nonresponsive payment is fixed",
            "title": "Change deadline interval day count",
            "type": "integer"
          },
          "createApprActForAutoDisb": {
            "description": "Flag to determine if automatic disbursements should be created with associated approval activities",
            "title": "Create approval activity for automatic disbursements",
            "type": "boolean"
          },
          "currencies": {
            "description": "Currencies supported by the plan",
            "items": {
              "$ref": "#/components/schemas/TypeKeyReference",
              "x-gw-typelist": "Currency"
            },
            "minItems": 1,
            "title": "Currencies",
            "type": "array"
          },
          "delayDisbursement": {
            "description": "Delay disbursement processing for this many days",
            "title": "Payment due interval",
            "type": "integer"
          },
          "description": {
            "description": "Detailed description of the billing plan",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "disbursementOverDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default disbursement over threshold for each supported currency",
            "title": "Disbursement over defaults"
          },
          "draftDayLogic": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Defines how the draft day will be adjusted (if at all) to fall on a business day",
            "title": "Draft day logic",
            "x-gw-typelist": "DayOfMonthLogic"
          },
          "draftIntervalDayCount": {
            "description": "The number of days before the draft date on a nonresponsive payment",
            "title": "Draft interval day count",
            "type": "integer"
          },
          "effectiveDate": {
            "description": "The date on which this plan becomes effective",
            "format": "date",
            "title": "Effective date",
            "type": "string"
          },
          "expirationDate": {
            "description": "The date on which this plan expires",
            "format": "date",
            "nullable": true,
            "title": "Expiration date",
            "type": "string",
            "x-gw-after": "now"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "inUse": {
            "description": "Internal flag used to determine whether or not this plan is in use",
            "readOnly": true,
            "title": "In use",
            "type": "boolean"
          },
          "invoiceFeeDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default invoice fee for each supported currency",
            "title": "Invoice fee defaults"
          },
          "leadTimeDayUnit": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The DayUnit type of the plan lead time, such as business or calendar",
            "title": "Lead time day unit",
            "x-gw-typelist": "DayUnit"
          },
          "lowBalanceMethod": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The method for handling low balance invoices",
            "title": "Low balance method",
            "x-gw-typelist": "LowBalanceMethod"
          },
          "lowBalanceThresholdDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default low balance threshold for each supported currency",
            "title": "Low balance threshold defaults"
          },
          "name": {
            "description": "The name of the plan",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "nonResponsivePmntDueInterval": {
            "description": "The number of days between the statement date and the payment due date for payment methods that are nonresponsive",
            "title": "Non responsive payment due interval",
            "type": "integer"
          },
          "paymentDueDayLogic": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Defines how the due day will be adjusted (if at all) to fall on a business day",
            "title": "Payment due day logic",
            "x-gw-typelist": "DayOfMonthLogic"
          },
          "paymentDueInterval": {
            "description": "The number of days between the statement date and the payment due date for responsive payment methods",
            "title": "Payment due interval",
            "type": "integer"
          },
          "paymentReversalFeeDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default payment reversal fee for each supported currency",
            "title": "Payment reversal fee defaults"
          },
          "planOrder": {
            "description": "The order of this plan in the list of all plans (lower values are higher priority)",
            "readOnly": true,
            "title": "Plan order",
            "type": "integer"
          },
          "requestIntervalDayCount": {
            "description": "The number of days between when the invoice is billed and when the nonresponsive payment request is sent",
            "title": "Request interval day count",
            "type": "integer"
          },
          "reviewDisbursementOverDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default review disbursement over threshold for each supported currency",
            "title": "Review disbursement over defaults"
          },
          "sendAutoDisbAwaitingApproval": {
            "description": "Flag to determine if automatic disbursements awaiting approval should be sent on their due dates",
            "title": "Send automatic disbursements awaiting approval",
            "type": "boolean"
          },
          "skipInstallmentFees": {
            "description": "Flag to determine if installment fees should be skipped",
            "title": "Skip installment fees",
            "type": "boolean"
          },
          "statement": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of statement to send",
            "title": "Statement type",
            "x-gw-typelist": "StatementType"
          },
          "suppressLowBalInvoices": {
            "description": "Flag to determine if low balance invoices should be suppressed",
            "title": "Suppress low balance invoices",
            "type": "boolean"
          },
          "westernMethod": {
            "description": "Flag to determine if Western Method accounting is used for earned premium calculations",
            "title": "Western method",
            "type": "boolean"
          }
        },
        "title": "Billing plan",
        "type": "object",
        "x-gw-filterable": [
          "lowBalanceMethod",
          "draftDayLogic",
          "paymentDueDayLogic",
          "createApprActForAutoDisb",
          "delayDisbursement",
          "leadTimeDayUnit",
          "aggregation",
          "westernMethod",
          "draftIntervalDayCount",
          "statement",
          "inUse",
          "expirationDate",
          "allowModOfManDisb",
          "suppressLowBalInvoices",
          "requestIntervalDayCount",
          "sendAutoDisbAwaitingApproval",
          "availableDisbAmtType",
          "skipInstallmentFees",
          "nonResponsivePmntDueInterval",
          "paymentDueInterval",
          "name",
          "changeDeadlineIntervalDayCount",
          "effectiveDate"
        ],
        "x-gw-requiredForCreate": [
          "lowBalanceMethod",
          "draftDayLogic",
          "paymentDueDayLogic",
          "createApprActForAutoDisb",
          "delayDisbursement",
          "leadTimeDayUnit",
          "aggregation",
          "westernMethod",
          "draftIntervalDayCount",
          "statement",
          "allowModOfManDisb",
          "suppressLowBalInvoices",
          "requestIntervalDayCount",
          "sendAutoDisbAwaitingApproval",
          "availableDisbAmtType",
          "skipInstallmentFees",
          "nonResponsivePmntDueInterval",
          "paymentDueInterval",
          "name",
          "changeDeadlineIntervalDayCount",
          "effectiveDate",
          "currencies"
        ],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": [
          "lowBalanceMethod",
          "draftDayLogic",
          "paymentDueDayLogic",
          "createApprActForAutoDisb",
          "delayDisbursement",
          "leadTimeDayUnit",
          "aggregation",
          "planOrder",
          "westernMethod",
          "draftIntervalDayCount",
          "statement",
          "inUse",
          "expirationDate",
          "allowModOfManDisb",
          "suppressLowBalInvoices",
          "requestIntervalDayCount",
          "sendAutoDisbAwaitingApproval",
          "availableDisbAmtType",
          "skipInstallmentFees",
          "nonResponsivePmntDueInterval",
          "paymentDueInterval",
          "name",
          "changeDeadlineIntervalDayCount",
          "effectiveDate"
        ]
      },
      "BillingPlanData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/BillingPlan"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "BillingPlanList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to determine if additional pages of results are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/BillingPlanData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included on responses if the `includeTotal` query parameter is used to request that the `total` be calculated.  Capped at 1000.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BillingPlanRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BillingPlanData"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "BillingPlanResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BillingPlanData"
          }
        },
        "type": "object"
      },
      "DelinquencyPlan": {
        "description": "Delinquency plan (Since 1.4.0)",
        "properties": {
          "acctEnterDelinquencyThresholdDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default account enter delinquency threshold for each supported currency",
            "title": "Account enter delinquency threshold defaults"
          },
          "applicableSegments": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The market segments for which this delinquency plan may be used",
            "nullable": true,
            "title": "Applicable segments",
            "x-gw-typelist": "ApplicableSegments"
          },
          "cancellationTarget": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The cancellation target for the plan",
            "title": "Cancellation target",
            "x-gw-typelist": "CancellationTarget"
          },
          "cancellationThresholdDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default cancellation threshold for each supported currency",
            "title": "Cancellation threshold defaults"
          },
          "currencies": {
            "description": "Currencies supported by the plan",
            "items": {
              "$ref": "#/components/schemas/TypeKeyReference",
              "x-gw-typelist": "Currency"
            },
            "minItems": 1,
            "title": "Currencies",
            "type": "array"
          },
          "description": {
            "description": "Detailed description of the plan",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "effectiveDate": {
            "description": "The date on which this plan becomes effective",
            "format": "date",
            "title": "Effective date",
            "type": "string"
          },
          "exitDelinquencyThresholdDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default exit delinquency threshold for each supported currency",
            "title": "Exit delinquency threshold defaults"
          },
          "expirationDate": {
            "description": "The date on which this plan expires",
            "format": "date",
            "nullable": true,
            "title": "Expiration date",
            "type": "string",
            "x-gw-after": "now"
          },
          "gracePeriodDayUnit": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The DayUnit type of the plan's grace period days, such as business or calendar",
            "title": "Grace period day unit",
            "x-gw-typelist": "DayUnit"
          },
          "gracePeriodDays": {
            "description": "The number of grace period days",
            "minimum": 0,
            "title": "Grace period days",
            "type": "integer"
          },
          "holdInvoicingOnDlnqPolicies": {
            "description": "If true, invoice items associated with delinquent policy periods will be held",
            "title": "Hold invoicing on delinquent policies",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "inUse": {
            "description": "Internal flag used to determine whether or not this plan is in use",
            "readOnly": true,
            "title": "In use",
            "type": "boolean"
          },
          "lateFeeAmountDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default late fee for each supported currency",
            "title": "Late fee amount defaults"
          },
          "name": {
            "description": "The name of the plan",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "planOrder": {
            "description": "The order of this plan in the list of all plans (lower values are higher priority)",
            "readOnly": true,
            "title": "Plan order",
            "type": "integer"
          },
          "polEnterDelinquencyThresholdDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default policy enter delinquency threshold for each supported currency",
            "title": "Policy enter delinquency threshold defaults"
          },
          "reinstatementFeeAmountDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default reinstatement fee for each supported currency",
            "title": "Reinstatement fee amount defaults"
          },
          "writeoffThresholdDefaults": {
            "$ref": "#/components/schemas/FeeThresholdMap",
            "description": "The default writeoff threshold for each supported currency",
            "title": "Reinstatement fee amount defaults"
          }
        },
        "title": "Delinquency plan",
        "type": "object",
        "x-gw-filterable": [
          "applicableSegments",
          "gracePeriodDays",
          "cancellationTarget",
          "gracePeriodDayUnit",
          "inUse",
          "name",
          "holdInvoicingOnDlnqPolicies",
          "effectiveDate",
          "expirationDate"
        ],
        "x-gw-requiredForCreate": [
          "gracePeriodDays",
          "cancellationTarget",
          "gracePeriodDayUnit",
          "name",
          "holdInvoicingOnDlnqPolicies",
          "effectiveDate",
          "currencies"
        ],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": [
          "applicableSegments",
          "gracePeriodDays",
          "planOrder",
          "cancellationTarget",
          "gracePeriodDayUnit",
          "inUse",
          "name",
          "holdInvoicingOnDlnqPolicies",
          "effectiveDate",
          "expirationDate"
        ]
      },
      "DelinquencyPlanData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/DelinquencyPlan"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "DelinquencyPlanList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DelinquencyPlanData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DelinquencyPlanRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DelinquencyPlanData"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "DelinquencyPlanResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DelinquencyPlanData"
          }
        },
        "type": "object"
      },
      "FeeThresholdMap": {
        "additionalProperties": {
          "description": "The fee or threshold defaults, with currency code as the key",
          "format": "gw-bigdecimal",
          "nullable": true,
          "title": "Defaults",
          "type": "string"
        },
        "description": "A map of a type of fee or threshold defaults associated with a Plan (Since 1.4.0)",
        "title": "A map of fee or threshold defaults",
        "type": "object",
        "x-gw-sinceVersion": "1.4.0"
      },
      "Group": {
        "description": "A named group within the system (Since 1.4.0)",
        "properties": {
          "displayName": {
            "description": "The formatted name of this group",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "groupType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Type of this group",
            "title": "Group type",
            "x-gw-typelist": "GroupType"
          },
          "id": {
            "description": "The unique identifier of this group",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "name": {
            "description": "The name of this group",
            "maxLength": 100,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Group` that is the parent of this group",
            "title": "Parent",
            "x-gw-reference-schema": "Group",
            "x-gw-referenceType": "Group"
          },
          "securityZone": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `SecurityZone` that this group belongs to",
            "title": "Security zone"
          },
          "supervisor": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that represents the supervisor of this group",
            "title": "Supervisor",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          }
        },
        "title": "Group",
        "type": "object",
        "x-gw-filterable": ["groupType", "name"],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": ["name"]
      },
      "GroupData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Group"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "GroupList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/GroupData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GroupResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupData"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          }
        },
        "type": "object"
      },
      "GroupUser": {
        "description": "Details about a user's involvement in a group (Since 1.4.0)",
        "properties": {
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "loadFactor": {
            "description": "Percentage value of normal workload to be given to this user in this group",
            "nullable": true,
            "title": "Load factor",
            "type": "integer"
          },
          "loadFactorType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Type of load factor privileges the user has in this group",
            "nullable": true,
            "title": "Load factor type",
            "x-gw-typelist": "LoadFactorType"
          },
          "manager": {
            "description": "Flag indicating whether the user has permission to see activity within the group",
            "nullable": false,
            "title": "Manager",
            "type": "boolean"
          },
          "member": {
            "description": "Flag indicating whether the user is a working member of the group (for purposes of work assignment, for example), as opposed to simply being associated with the group as a manager or other auxiliary person",
            "nullable": false,
            "title": "Member",
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "The associated user",
            "nullable": false,
            "title": "User",
            "x-gw-createOnly": true,
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          }
        },
        "title": "Details about a user's involvement in a group",
        "type": "object",
        "x-gw-filterable": [
          "loadFactor",
          "loadFactorType",
          "manager",
          "member"
        ],
        "x-gw-requiredForCreate": ["user"],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": ["user"]
      },
      "GroupUserData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/GroupUser"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "GroupUserList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/GroupUserData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GroupUserRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupUserData"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "GroupUserResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupUserData"
          }
        },
        "type": "object"
      },
      "Header": {
        "description": "An HTTP request or response header",
        "properties": {
          "name": {
            "description": "The header name",
            "title": "Name",
            "type": "string"
          },
          "value": {
            "description": "The header value",
            "title": "Value",
            "type": "string"
          }
        },
        "required": ["name", "value"],
        "title": "Header",
        "type": "object"
      },
      "LinkObject": {
        "description": "A standard HTTP link",
        "properties": {
          "href": {
            "description": "The URL of the link",
            "title": "HREF",
            "type": "string"
          },
          "methods": {
            "description": "An array of HTTP method names that can be used with the link URL",
            "items": {
              "type": "string"
            },
            "title": "Methods",
            "type": "array"
          }
        },
        "title": "Linked object",
        "type": "object"
      },
      "Links": {
        "additionalProperties": {
          "$ref": "#/components/schemas/LinkObject",
          "description": "A set of named links. Each key represents the name of the link, such as a child of the current element, an action that can be taken on it, or a navigation option.",
          "title": "Links"
        },
        "description": "A set of named links",
        "title": "Links",
        "type": "object"
      },
      "PhoneNumber": {
        "description": "A phone number, with different components of the number broken out as separate fields",
        "properties": {
          "countryCode": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The country code for the phone number",
            "title": "Country code",
            "x-gw-typelist": "PhoneCountryCode"
          },
          "displayName": {
            "description": "The phone number formatted in a standardized way",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "extension": {
            "description": "The extension for the phone number",
            "nullable": true,
            "title": "Extension",
            "type": "string"
          },
          "number": {
            "description": "The actual phone number, including area code, but excluding the country code and extension",
            "title": "Number",
            "type": "string"
          }
        },
        "required": ["countryCode", "number"],
        "title": "Phone number",
        "type": "object"
      },
      "RelatedCollection": {
        "description": "A set of element references that are related to the element in some way. Used to link elements with their relations when a request is made using the `include` query parameter.",
        "properties": {
          "count": {
            "description": "The number of elements included in the `data` array",
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "description": "The list of references to the related elements",
            "items": {
              "$ref": "#/components/schemas/SimpleReference"
            },
            "title": "Data",
            "type": "array"
          },
          "total": {
            "description": "The total number of elements in the related set of elements. Only present if the `includeTotal` query parameter is used to request that the total be calculated for an included collection.",
            "title": "Total",
            "type": "integer"
          }
        },
        "title": "Related collection",
        "type": "object"
      },
      "RelatedCollections": {
        "additionalProperties": {
          "$ref": "#/components/schemas/RelatedCollection",
          "description": "The related collections. Each key in this object will match the name of the inclusion requested via the `include` query parameter.",
          "title": "Related collections"
        },
        "description": "A set of `RelatedCollection` elements that contain references to elements included using the `include` query parameter on a request",
        "title": "Related collections",
        "type": "object"
      },
      "Role": {
        "description": "A named role within the system (Since 1.3.0)",
        "properties": {
          "carrierInternal": {
            "description": "A `true` value indicates that the role is applicable to users internal to the carrier organization",
            "title": "Carrier internal",
            "type": "boolean"
          },
          "description": {
            "description": "Detailed description of the role",
            "maxLength": 4096,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "displayName": {
            "description": "The formatted name of the role",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the `Role`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "name": {
            "description": "The name of the role",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "roleType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of role",
            "nullable": true,
            "title": "Role type",
            "x-gw-typelist": "RoleType"
          }
        },
        "title": "Role",
        "type": "object",
        "x-gw-filterable": ["carrierInternal", "name", "roleType"],
        "x-gw-sinceVersion": "1.3.0",
        "x-gw-sortable": ["name"]
      },
      "RoleData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Role"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "RoleList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/RoleData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RolePermission": {
        "description": "A RolePermission represents a permission granted to a particular role (Since 1.4.0)",
        "properties": {
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "A reference to a `SystemPermissionType` that has been granted to a role",
            "title": "Permission",
            "x-gw-typelist": "SystemPermissionType"
          }
        },
        "title": "Role permission",
        "type": "object",
        "x-gw-filterable": ["permission"],
        "x-gw-requiredForCreate": ["permission"],
        "x-gw-sinceVersion": "1.4.0",
        "x-gw-sortable": ["permission"]
      },
      "RolePermissionData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/RolePermission"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "RolePermissionList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/RolePermissionData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RolePermissionRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RolePermissionData"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "RolePermissionResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RolePermissionData"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          }
        },
        "type": "object"
      },
      "RoleRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RoleData"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "RoleResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RoleData"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          }
        },
        "type": "object"
      },
      "SimpleReference": {
        "description": "A reference to an element",
        "properties": {
          "displayName": {
            "description": "The formatted name of the element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document (Since 1.2.0)",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": ["none"],
            "x-gw-sinceVersion": "1.2.0"
          },
          "refid": {
            "description": "A unique identifier given to the newly created element in the context of the current request",
            "title": "Reference ID",
            "type": "string"
          },
          "type": {
            "description": "The type of the referenced element",
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "title": "URI",
            "type": "string"
          }
        },
        "title": "Simple reference",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "TypeKeyReference": {
        "description": "A reference to a `TypeKey` element that defines an enumerated value from a `TypeList`",
        "properties": {
          "code": {
            "description": "The `code` of the `TypeKey`",
            "title": "Code",
            "type": "string"
          },
          "name": {
            "description": "The `name` of the `TypeKey`",
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["code"],
        "title": "TypeKey reference",
        "type": "object"
      },
      "User": {
        "description": "A named user within the system",
        "properties": {
          "active": {
            "description": "A `true` value indicates that the user is currently active and allowed to log in. A `false` value indicates the user has been deactivated and cannot currently log in.",
            "title": "Active",
            "type": "boolean"
          },
          "cellPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The cell phone number for the user (Since 1.3.0)",
            "nullable": true,
            "title": "Cell phone",
            "x-gw-sinceVersion": "1.3.0"
          },
          "displayName": {
            "description": "The formatted name of the `User`",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "employeeNumber": {
            "description": "The employee number assigned to the user",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Employee number",
            "type": "string"
          },
          "externalUser": {
            "description": "A `true` value indicates that the user represents a user from an external organization, rather than a user from within the insurer's organization",
            "title": "External user",
            "type": "boolean"
          },
          "firstName": {
            "description": "The first name of the user",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "First name",
            "type": "string"
          },
          "homePhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The home phone number for the user (Since 1.3.0)",
            "nullable": true,
            "title": "Home phone",
            "x-gw-sinceVersion": "1.3.0"
          },
          "id": {
            "description": "The unique identifier of the `User`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "lastName": {
            "description": "The last name of the user",
            "maxLength": 30,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Last name",
            "type": "string"
          },
          "roles": {
            "description": "The roles assigned to the user (Since 1.3.0)",
            "items": {
              "$ref": "#/components/schemas/UserRoleReference"
            },
            "title": "Roles",
            "type": "array",
            "x-gw-sinceVersion": "1.3.0"
          },
          "suffix": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The name suffix of the user",
            "nullable": true,
            "title": "Suffix",
            "x-gw-typelist": "NameSuffix"
          },
          "username": {
            "description": "The username for the user",
            "maxLength": 30,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Username",
            "type": "string"
          },
          "vacationStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Indicates whether the user is considered to be on vacation",
            "title": "Vacation status",
            "x-gw-typelist": "VacationStatusType"
          },
          "workPhone": {
            "$ref": "#/components/schemas/PhoneNumber",
            "description": "The work phone number for the user",
            "nullable": true,
            "title": "Work phone"
          }
        },
        "title": "User",
        "type": "object",
        "x-gw-requiredForCreate": ["username"]
      },
      "UserData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/User"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to responses.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to requests. See the documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included in the response through request inclusion. Only applicable to responses. See the documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to requests. See the documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "UserList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to access additional pages of results, if any are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/UserData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included in responses when the `includeTotal` query parameter is set to `true`. The maximum number of elements counted is 1000. If the response value is 1000, the actual count could be 1000 or greater.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserData"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "UserResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserData"
          },
          "included": {
            "$ref": "#/components/schemas/AdminInclusions"
          }
        },
        "type": "object"
      },
      "UserRoleReference": {
        "description": "A reference to a `Role` that has been granted to a user (Since 1.3.0)",
        "properties": {
          "displayName": {
            "description": "The formatted name of the element",
            "readOnly": true,
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "type": {
            "description": "The type of the referenced element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "readOnly": true,
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["id"],
        "title": "User role reference",
        "type": "object",
        "x-gw-sinceVersion": "1.3.0"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "APIs for InsuranceSuite administration objects",
    "title": "Admin API",
    "version": "1.4.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/batch": {
      "post": {
        "description": "Post a list of subrequests to make against this endpoint. Subrequests will be executed serially, in the order they are specified in the \"requests\" property of the input. Responses to each subrequest will then be batched up and returned all together. Subrequests inherit the headers from the main request, with the exception of the GW-Checksum header, but headers can be specified on the subrequest and will override any headers from the main request.",
        "operationId": "batchRequest",
        "parameters": [
          {
            "description": "Controls what response headers, if any, are included for subresponses. If unspecified, or set to the value \"*all\", all headers for subresponses will be returned. If set to the value \"*none\", no headers for subresponses will be returned. Otherwise, this parameter can consist of a comma-separated list of the names of headers that should be included on subresponses.",
            "explode": false,
            "in": "query",
            "name": "includeResponseHeaders",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequest"
              }
            }
          },
          "description": "The body of the batch request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            },
            "description": "The batch request itself was well-formed; individual subrequests may have succeeded or failed"
          }
        },
        "summary": "Issue multiple requests at once as a non-transactional batch"
      }
    },
    "/billing-plans": {
      "get": {
        "description": "Retrieve a collection of billing plans (Since 1.4.0)",
        "operationId": "getBillingPlans",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPlanList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of billing plans",
        "x-gw-childResourceType": "BillingPlan",
        "x-gw-resourceType": "BillingPlans",
        "x-gw-sinceVersion": "1.4.0"
      },
      "post": {
        "description": "Create a new billing plan (Since 1.4.0)",
        "operationId": "createBillingPlan",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingPlanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPlanResponse"
                }
              }
            },
            "description": "The details of the newly-created BillingPlan"
          }
        },
        "summary": "Create a new billing plan",
        "x-gw-childResourceType": "BillingPlan",
        "x-gw-resourceType": "BillingPlans",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/billing-plans/{billingPlanId}": {
      "delete": {
        "description": "Delete a billing plan (Since 1.4.0)",
        "operationId": "deleteBillingPlan",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a billing plan",
        "x-gw-resourceType": "BillingPlan",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "Retrieve details of a billing plan (Since 1.4.0)",
        "operationId": "getBillingPlan",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPlanResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of a billing plan",
        "x-gw-resourceType": "BillingPlan",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/billingPlanId"
        }
      ],
      "patch": {
        "description": "Update a billing plan (Since 1.4.0)",
        "operationId": "updateBillingPlan",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingPlanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPlanResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update a billing plan",
        "x-gw-resourceType": "BillingPlan",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/delinquency-plans": {
      "get": {
        "description": "Retrieve a collection of delinquency plans (Since 1.4.0)",
        "operationId": "getDelinquencyPlans",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelinquencyPlanList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a collection of delinquency plans",
        "x-gw-childResourceType": "DelinquencyPlan",
        "x-gw-resourceType": "DelinquencyPlans",
        "x-gw-sinceVersion": "1.4.0"
      },
      "post": {
        "description": "Create a new delinquency plan (Since 1.4.0)",
        "operationId": "createDelinquencyPlan",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelinquencyPlanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelinquencyPlanResponse"
                }
              }
            },
            "description": "The details of the newly-created DelinquencyPlan"
          }
        },
        "summary": "Create a new delinquency plan",
        "x-gw-childResourceType": "DelinquencyPlan",
        "x-gw-resourceType": "DelinquencyPlans",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/delinquency-plans/{delinquencyPlanId}": {
      "delete": {
        "description": "Delete a delinquency plan (Since 1.4.0)",
        "operationId": "deleteDelinquencyPlan",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a delinquency plan",
        "x-gw-resourceType": "DelinquencyPlan",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "Retrieve details of a delinquency plan (Since 1.4.0)",
        "operationId": "getDelinquencyPlan",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelinquencyPlanResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of a delinquency plan",
        "x-gw-resourceType": "DelinquencyPlan",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/delinquencyPlanId"
        }
      ],
      "patch": {
        "description": "Update a delinquency plan (Since 1.4.0)",
        "operationId": "updateDelinquencyPlan",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelinquencyPlanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelinquencyPlanResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update a delinquency plan",
        "x-gw-resourceType": "DelinquencyPlan",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/groups": {
      "get": {
        "description": "Retrieve a list of groups (Since 1.4.0)",
        "operationId": "getGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupList"
                }
              }
            },
            "description": "Successfully returned a list of groups"
          }
        },
        "summary": "Retrieve a list of groups",
        "x-gw-childResourceType": "Group",
        "x-gw-resourceType": "Groups",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/groups/{groupId}": {
      "get": {
        "description": "Returns details for a single group (Since 1.4.0)",
        "operationId": "getGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            },
            "description": "Successfully returned details for a single group"
          }
        },
        "summary": "Returns details for a single group",
        "x-gw-resourceType": "Group",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/groupId"
        }
      ]
    },
    "/groups/{groupId}/users": {
      "get": {
        "description": "Retrieve the users associated with the given group (Since 1.4.0)",
        "operationId": "getGroupUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve the users associated with the given group",
        "x-gw-childResourceType": "GroupUser",
        "x-gw-resourceType": "GroupUsers",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/groupId"
        }
      ],
      "post": {
        "description": "Add a user to the given group (Since 1.4.0)",
        "operationId": "createGroupUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserResponse"
                }
              }
            },
            "description": "The newly created details of the user's involvement in the given group"
          }
        },
        "summary": "Add a user to the given group",
        "x-gw-childResourceType": "GroupUser",
        "x-gw-resourceType": "GroupUsers",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/groups/{groupId}/users/{groupUserId}": {
      "delete": {
        "description": "Remove a user from the given group (Since 1.4.0)",
        "operationId": "deleteGroupUser",
        "responses": {
          "204": {
            "description": "Successful removal of the user from the given group"
          }
        },
        "summary": "Remove a user from the given group",
        "x-gw-resourceType": "GroupUser",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "Retrieve details of a user's involvement in the given group (Since 1.4.0)",
        "operationId": "getGroupUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve details of a user's involvement in the given group",
        "x-gw-resourceType": "GroupUser",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/groupId"
        },
        {
          "$ref": "#/components/parameters/groupUserId"
        }
      ],
      "patch": {
        "description": "Update the details of a user's involvement in the given group (Since 1.4.0)",
        "operationId": "updateGroupUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update the details of a user's involvement in the given group",
        "x-gw-resourceType": "GroupUser",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/openapi.json": {
      "get": {
        "description": "Return the Open API 3.0 representation of the schema",
        "operationId": "getOpenApiSchema",
        "parameters": [
          {
            "$ref": "#/components/parameters/enablePolymorphism"
          },
          {
            "$ref": "#/components/parameters/filterByUser"
          },
          {
            "$ref": "#/components/parameters/omitInclusions"
          },
          {
            "$ref": "#/components/parameters/prettyPrintSchema"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Return the Open API 3.0 representation of the schema",
        "x-gw-resourceType": "AdminOpenApiSchema"
      }
    },
    "/roles": {
      "get": {
        "description": "Retrieve a list of roles (Since 1.3.0)",
        "operationId": "getRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a list of roles",
        "x-gw-childResourceType": "Role",
        "x-gw-resourceType": "Roles",
        "x-gw-sinceVersion": "1.3.0"
      },
      "post": {
        "description": "Create a new role (Since 1.4.0)",
        "operationId": "createRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            },
            "description": "Successfully created a role"
          }
        },
        "summary": "Create a new role",
        "x-gw-childResourceType": "Role",
        "x-gw-resourceType": "Roles",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/roles/{roleId}": {
      "delete": {
        "description": "Delete a role (Since 1.4.0)",
        "operationId": "deleteRole",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete a role",
        "x-gw-resourceType": "Role",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "Returns details for a single role (Since 1.4.0)",
        "operationId": "getRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            },
            "description": "Successfully returned details for a single role"
          }
        },
        "summary": "Returns details for a single role",
        "x-gw-resourceType": "Role",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/roleId"
        }
      ],
      "patch": {
        "description": "Update this role's fields (Since 1.4.0)",
        "operationId": "updateRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            },
            "description": "Successful update"
          }
        },
        "summary": "Update this role's fields",
        "x-gw-resourceType": "Role",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/roles/{roleId}/permissions": {
      "get": {
        "description": "Retrieve a list of role permissions (Since 1.4.0)",
        "operationId": "getRolePermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermissionList"
                }
              }
            },
            "description": "Successfully returned a list of role permissions"
          }
        },
        "summary": "Retrieve a list of role permissions",
        "x-gw-childResourceType": "RolePermission",
        "x-gw-resourceType": "RolePermissions",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/roleId"
        }
      ],
      "post": {
        "description": "Create a new permission on this role (Since 1.4.0)",
        "operationId": "createRolePermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermissionResponse"
                }
              }
            },
            "description": "The details of the newly created role permission`"
          }
        },
        "summary": "Create a new permission on this role",
        "x-gw-childResourceType": "RolePermission",
        "x-gw-resourceType": "RolePermissions",
        "x-gw-sinceVersion": "1.4.0"
      }
    },
    "/roles/{roleId}/permissions/{permissionId}": {
      "delete": {
        "description": "Delete the permission on the given role (Since 1.4.0)",
        "operationId": "deleteRolePermission",
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        },
        "summary": "Delete the permission on the given role",
        "x-gw-resourceType": "RolePermission",
        "x-gw-sinceVersion": "1.4.0"
      },
      "get": {
        "description": "The details of a permission on the given role (Since 1.4.0)",
        "operationId": "getRolePermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermissionResponse"
                }
              }
            },
            "description": "Successfully returned a role permission"
          }
        },
        "summary": "The details of a permission on the given role",
        "x-gw-resourceType": "RolePermission",
        "x-gw-sinceVersion": "1.4.0"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/roleId"
        },
        {
          "$ref": "#/components/parameters/permissionId"
        }
      ]
    },
    "/swagger.json": {
      "get": {
        "description": "Returns a Swagger 2.0 schema for this API as json",
        "operationId": "generateDocs",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "summary": "Returns the Swagger schema for this API"
      }
    },
    "/users": {
      "get": {
        "description": "Retrieve a list of users",
        "operationId": "getUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Retrieve a list of users",
        "x-gw-childResourceType": "User",
        "x-gw-resourceType": "Users"
      },
      "post": {
        "description": "Create a new user",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "The details of the newly-created user"
          }
        },
        "summary": "Create a new user",
        "x-gw-childResourceType": "User",
        "x-gw-resourceType": "Users"
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "Returns details for a single user",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "Returns details for a single user"
          }
        },
        "summary": "Returns details for a single user",
        "x-gw-resourceType": "User"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "patch": {
        "description": "Update this user's fields",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "Successful update"
          }
        },
        "summary": "Update this user's fields",
        "x-gw-resourceType": "User"
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8580/bc/rest/admin/v1"
    }
  ]
}
