{
  "components": {
    "parameters": {
      "activityId": {
        "description": "The `id` of the `Activity`",
        "in": "path",
        "name": "activityId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "documentId": {
        "description": "The `id` of the `Document`",
        "in": "path",
        "name": "documentId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "enablePolymorphism": {
        "description": "Whether or not to use the `discriminator`/`oneOf` pattern to output schemas in cases where the valid set of fields can vary based on some attribute of the data such as the country or subtype.  Defaults to `true`. See the Cloud API documentation for more information.",
        "in": "query",
        "name": "enablePolymorphism",
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "fields": {
        "description": "Allows the caller to specify the set of fields that should be included on the response. This can be used to limit the set of fields returned as well as to include optional fields that otherwise wouldn't normally be returned. The parameter is either of the form `fields=<field list>` or `fields=<include>:<field list>`, where `<field list>` consists of a comma-separated list of field or field set names. See the Cloud API documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "fields",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "filter": {
        "description": "Filters the list of results based on the specified field, operator, and value. The parameter is either of the form `filter=<field>:<operator>:<value>` or `filter=<include>:<field>:<operator>:<value>`. See the Cloud API documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "filter",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "filterByUser": {
        "description": "Whether or not to filter endpoints and schema properties by the authorization of the caller. Defaults to `false`.",
        "in": "query",
        "name": "filterByUser",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "gwLanguageHeader": {
        "description": "If specified, this header will set the language used when processing the request",
        "in": "header",
        "name": "GW-Language",
        "schema": {
          "type": "string"
        }
      },
      "gwLocaleHeader": {
        "description": "If specified, this header will set the locale used when processing the request",
        "in": "header",
        "name": "GW-Locale",
        "schema": {
          "type": "string"
        }
      },
      "gwSchemaProperty": {
        "description": "If specified and the operation returns json with a defined schema, this will add a property, '$GW-Schema',  with the fully qualified name of the object's schema.",
        "in": "header",
        "name": "GW-IncludeSchemaProperty",
        "schema": {
          "type": "boolean"
        }
      },
      "gwTraceability": {
        "description": "This header permits a customer to trace a request from its initial reception through all of the subsequent applications that were invoked to handle that request. The actual traceability id present in the MDC and logs (and returned in the response), is dependent on the implementation of TraceabilityIDPlugin. The default implementation uses this value, if specified, or a generated UID.  However, another implementation may always generate a unique id and just log  the relationship between these incoming values and the generated UID. Note: that this header can be repeated, but the resulting string will just be the comma separated values.",
        "in": "header",
        "name": "X-Correlation-ID",
        "schema": {
          "type": "string"
        }
      },
      "gwTransactionID": {
        "description": "If specified and this operation results in a database commit, this header's value must not have been submitted before.  This value must be globally unique across all clients, apis and webservices. It is used for those transaction that are not idempotent. Unless this is explicitly referenced for an operation it is not required.",
        "in": "header",
        "name": "GW-DBTransaction-ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "gwUnknownPropertyHeader": {
        "description": "If specified, this header will drive the behavior for unknown property handling",
        "in": "header",
        "name": "GW-UnknownPropertyHandling",
        "schema": {
          "enum": ["log", "reject", "ignore"],
          "type": "string"
        }
      },
      "gwUnknownQueryParameterHeader": {
        "description": "If specified, this header will drive the behavior for unknown query parameter handling.  Default is to reject them.",
        "in": "header",
        "name": "GW-UnknownQueryParamHandling",
        "schema": {
          "enum": ["log", "reject", "ignore"],
          "type": "string"
        }
      },
      "gwValidateResponseHandling": {
        "description": "If specified, this header permits the client to override the behavior around validating response",
        "in": "header",
        "name": "GW-ValidateResponseHandling",
        "schema": {
          "type": "boolean"
        }
      },
      "include": {
        "description": "Used to request that additional resources be returned with the API response in the `included` section of the response envelope. The `include` parameter can appear multiple times, and is a comma-separated list of additional resources to include. See the Cloud API documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "include",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "includeTotal": {
        "description": "Used to request that results should include a count of the total number of results available, which may be more than the total number of results currently being returned. This parameter is of the form `includeTotal=<true|false>` or `includeTotal=<include>:<true|false>`. If not specified, the default is considered to be `false`. See the Cloud API documentation for more information about response pagination.",
        "explode": true,
        "in": "query",
        "name": "includeTotal",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "noteId": {
        "description": "The `id` of the `Note`",
        "in": "path",
        "name": "noteId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "pageOffset": {
        "description": "The offset of the first result to fetch when fetching a paginated set of results. The parameter is of the form `pageOffset=<number>` where the first result has an offset of 0. For example, `pageOffset=25` will skip the first 25 results in sorted order. If not specified, the default value is 0. See the Cloud API documentation for more information about response pagination.",
        "in": "query",
        "name": "pageOffset",
        "schema": {
          "type": "string"
        }
      },
      "pageSize": {
        "description": "The maximum number of results to return in the response. The parameter is of the form `pageSize=<size>` or `pageSize=<include>:<size>`. The maximum allowed `pageSize` and the default `pageSize` both depend on the specific API endpoint the request is made to. See the Cloud API documentation for more information about response pagination.",
        "explode": true,
        "in": "query",
        "name": "pageSize",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "prettyPrintSchema": {
        "description": "Whether or not to pretty-print the returned schema, making it larger but more human readable.  Defaults to `false`.",
        "in": "query",
        "name": "prettyPrint",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "sort": {
        "description": "Controls the sorting of elements within a response. The sort parameter is of the form `sort=<fields>` or `sort=<include>:<fields>`, where `<fields>` represents a comma-separated list of field names to sort on. Field names can be prefixed with `-` to request a descending sort, otherwise the sort will be ascending. See the Cloud API documentation for more information.",
        "explode": true,
        "in": "query",
        "name": "sort",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      }
    },
    "schemas": {
      "Activity": {
        "description": "An `Activity` is an assignable item that represents a task to be done, a decision to be made, or information to be aware of",
        "properties": {
          "activityPattern": {
            "description": "The code of the `ActivityPattern` used to create this activity and set its initial values",
            "maxLength": 60,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Activity pattern",
            "type": "string",
            "x-gw-createOnly": true
          },
          "activityType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of this activity, such as `general` or `approval`",
            "readOnly": true,
            "title": "Activity type",
            "x-gw-typelist": "ActivityType"
          },
          "approvalIssue": {
            "description": "The reason approval is needed. Only applicable to activities with an `activityType` of `approval`.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Approval issue",
            "type": "string"
          },
          "approvalRationale": {
            "description": "Rationale for approving or rejecting this activity. Only applicable to activities with an `activityType` of `approval`.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Approval rationale",
            "type": "string"
          },
          "approved": {
            "description": "This field is `true` if this activity has been approved, `false` if this activity has been rejected, and omitted otherwise. Only applicable to activities with an `activityType` of `approval`.",
            "readOnly": true,
            "title": "Approved",
            "type": "boolean"
          },
          "assignedByUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` who last assigned or re-assigned this activity",
            "readOnly": true,
            "title": "Assigned by user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignedGroup": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Group` that this activity is currently assigned to",
            "readOnly": true,
            "title": "Assigned group"
          },
          "assignedQueue": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `Queue` that this activity is currently assigned to",
            "readOnly": true,
            "title": "Assigned queue"
          },
          "assignedUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that this activity is currently assigned to",
            "readOnly": true,
            "title": "Assigned user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "assignmentStatus": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current assignment status of this activity, such as `assigned` or `unassigned`",
            "readOnly": true,
            "title": "Assignment status",
            "x-gw-typelist": "AssignmentStatus"
          },
          "autopilotHandlingDecision": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Record of the decision made around how to handle this activity. Only intended for use if Claims Autopilot is enabled.",
            "nullable": true,
            "title": "Autopilot handling decision",
            "x-gw-defaultViews": ["none"],
            "x-gw-typelist": "AutopilotHandlingDecision"
          },
          "autopilotId": {
            "description": "Unique identifier assigned to this activity by the Claims Autopilot system. Only intended for use by the Claims Autopilot system.",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Autopilot ID",
            "type": "string",
            "x-gw-defaultViews": ["none"]
          },
          "autopilotPurpose": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Activity purpose set by the Claims Autopilot system. Only intended for use by the Claims Autopilot system.",
            "nullable": true,
            "title": "Autopilot purpose",
            "x-gw-defaultViews": ["none"],
            "x-gw-typelist": "AutopilotPurpose"
          },
          "closeDate": {
            "description": "The date and time when this activity was completed, skipped, approved, or rejected",
            "format": "date-time",
            "readOnly": true,
            "title": "Close date",
            "type": "string"
          },
          "closeUser": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "A reference to the `User` that completed, skipped, approved, or rejected this activity",
            "readOnly": true,
            "title": "Close user",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "coverageIssues": {
            "description": "A list of possible issues with coverage for the associated claim",
            "items": {
              "$ref": "#/components/schemas/CoverageIssue"
            },
            "title": "Coverage issues",
            "type": "array",
            "x-gw-createOnly": true
          },
          "createTime": {
            "description": "The date and time when this `Activity` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Create time",
            "type": "string"
          },
          "description": {
            "description": "The description of this activity",
            "maxLength": 1333,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string",
            "x-gw-defaultViews": ["detail"]
          },
          "dueDate": {
            "description": "Date and time by which a person should complete the activity. If not completed by this time, the activity is considered overdue. Not applicable to activities that represent events rather than tasks.",
            "format": "date-time",
            "nullable": true,
            "title": "Due date",
            "type": "string"
          },
          "endDate": {
            "description": "Date and time at which the activity is expected to end. Only applicable to activities that represent events.",
            "format": "date-time",
            "nullable": true,
            "title": "End date",
            "type": "string"
          },
          "escalated": {
            "description": "A `true` value for this field indicates that the activity has been escalated",
            "readOnly": true,
            "title": "Escalated",
            "type": "boolean"
          },
          "escalationDate": {
            "description": "Date and time at which this activity will be escalated if it has not yet been completed",
            "format": "date-time",
            "nullable": true,
            "title": "Escalation date",
            "type": "string"
          },
          "externallyOwned": {
            "description": "A `true` value for this field indicates that the activity is owned by a user or group outside of the insurer",
            "title": "Externally owned",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this `Activity`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "importance": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "Level of importance of the activity",
            "title": "Importance",
            "x-gw-typelist": "ImportanceLevel"
          },
          "initialAssignment": {
            "$ref": "#/components/schemas/Assignee",
            "description": "The `Assignee` that this activity should be assigned to when it is first created",
            "title": "Initial assignment",
            "x-gw-createOnly": true
          },
          "mandatory": {
            "description": "A `true` value for this field indicates that the activity is mandatory and cannot be skipped",
            "title": "Mandatory",
            "type": "boolean"
          },
          "priority": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The priority of this activity",
            "title": "Priority",
            "x-gw-typelist": "Priority"
          },
          "recurring": {
            "description": "A `true` value indicates that this activity is recurring",
            "title": "Recurring",
            "type": "boolean"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "A reference to the primary element that the activity is related to",
            "title": "Related to"
          },
          "startDate": {
            "description": "Date and time at which the activity is scheduled to begin. Only applicable to activities that represent events.",
            "format": "date-time",
            "nullable": true,
            "title": "Start date",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The status of this activity, such as `open` or `complete`",
            "readOnly": true,
            "title": "Status",
            "x-gw-typelist": "ActivityStatus"
          },
          "subject": {
            "description": "A brief title for the activity",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Subject",
            "type": "string"
          }
        },
        "title": "Activity",
        "type": "object",
        "x-gw-filterable": [
          "autopilotHandlingDecision",
          "autopilotId",
          "autopilotPurpose",
          "closeDate",
          "dueDate",
          "escalated",
          "externallyOwned",
          "priority",
          "status",
          "subject"
        ],
        "x-gw-sortable": [
          "assignedUser",
          "dueDate",
          "escalated",
          "priority",
          "status",
          "subject"
        ]
      },
      "ActivityActionRequest": {
        "properties": {
          "included": {
            "$ref": "#/components/schemas/ActivityRequestInclusions"
          }
        },
        "type": "object"
      },
      "ActivityApprovalAttributes": {
        "properties": {
          "approvalRationale": {
            "description": "The rationale for approving this `Activity`",
            "title": "Approval rationale",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActivityApprovalData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ActivityApprovalAttributes"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "ActivityApprovalRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ActivityApprovalData"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityRequestInclusions"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "ActivityAssignmentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssigneeData"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityRequestInclusions"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "ActivityData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Activity"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "ActivityList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to determine if additional pages of results are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ActivityData"
            },
            "type": "array"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included on responses if the `includeTotal` query parameter is used to request that the `total` be calculated.  Capped at 1000.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ActivityRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ActivityData"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityRequestInclusions"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "ActivityRequestInclusions": {
        "properties": {
          "Note": {
            "items": {
              "$ref": "#/components/schemas/NoteData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ActivityResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ActivityData"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          }
        },
        "type": "object"
      },
      "ActivityResponseInclusions": {
        "properties": {
          "Assignee": {
            "items": {
              "$ref": "#/components/schemas/AssigneeData"
            },
            "type": "array"
          },
          "Note": {
            "items": {
              "$ref": "#/components/schemas/NoteData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Assignee": {
        "description": "An `Assignee` represents the target of an assignment action, such as a user/group combination, assignment queue, or automatic rule-based assignment",
        "properties": {
          "autoAssign": {
            "description": "Set to `true` to indicate the assignment should be done automatically by the system. Cannot be combined with any other fields.",
            "title": "Auto assign",
            "type": "boolean"
          },
          "claimOwner": {
            "description": "Set to `true` to indicate that the element should be assigned to the same user and group that own the element's claim",
            "title": "Claim owner",
            "type": "boolean"
          },
          "groupId": {
            "description": "The ID of the `Group` that the resource should be assigned to. If specified without the `userId` field, the `User` within the `Group` is selected by assignment rules. If specified along with the `userId` field, that specific `User` is assigned the element.",
            "title": "Group ID",
            "type": "string"
          },
          "name": {
            "description": "A human-readable name for the type of assignment that this `Assignee` represents",
            "readOnly": true,
            "title": "Name",
            "type": "string"
          },
          "queueId": {
            "description": "The ID of the `Queue` that the resource should be assigned to. Cannot be combined with any other fields.",
            "title": "Queue ID",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the `User` that the resource should be assigned to. The `groupId` field must also be specified if the `userId` field is specified, and the `User` must be a member of that `Group` and have permission to be assigned the element.",
            "title": "User ID",
            "type": "string"
          }
        },
        "title": "Assignee",
        "type": "object"
      },
      "AssigneeData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Assignee"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "AssigneeList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to determine if additional pages of results are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AssigneeData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included on responses if the `includeTotal` query parameter is used to request that the `total` be calculated.  Capped at 1000.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BatchRequest": {
        "description": "The body of a batch request",
        "properties": {
          "requests": {
            "description": "The array of subrequests",
            "items": {
              "$ref": "#/components/schemas/BatchSubRequest"
            },
            "title": "Requests",
            "type": "array"
          }
        },
        "required": ["requests"],
        "title": "Batch request",
        "type": "object"
      },
      "BatchResponse": {
        "description": "The body of a response to a batch request. The `responses` field will have one element for every entry in the `requests` field on the request, and responses will appear in the same order.",
        "properties": {
          "responses": {
            "description": "The list of subresponses, appearing in the same order as the elements in the `requests` field of the request",
            "items": {
              "$ref": "#/components/schemas/BatchSubResponse"
            },
            "title": "Responses",
            "type": "array"
          }
        },
        "title": "Batch response",
        "type": "object"
      },
      "BatchSubRequest": {
        "description": "An individual subrequest within a batch request",
        "properties": {
          "body": {
            "description": "The body of the subrequest",
            "title": "Body",
            "type": "object"
          },
          "headers": {
            "description": "Headers that will be included as part of the subrequest. Any headers defined using this field will override header values inherited from the main request. Any headers present on the main request that are not defined in this list will be inherited when the subrequest is made, with the exception of the `GW-Checksum` header.",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "title": "Headers",
            "type": "array"
          },
          "method": {
            "description": "The HTTP method for the subrequest",
            "enum": [
              "delete",
              "head",
              "get",
              "options",
              "patch",
              "post",
              "put"
            ],
            "title": "Method",
            "type": "string"
          },
          "onFail": {
            "description": "Controls whether or not subsequent subrequests are processed if this subrequest fails. The default behavior is to continue processing subrequests. The `abort` option specifies that all subsequent subrequests will be skipped.",
            "enum": ["abort", "continue"],
            "title": "On fail",
            "type": "string"
          },
          "path": {
            "description": "The path for the subrequest. This path is relative to the root of the API hosting the batch endpoint. For example, if the batch endpoint is `<servlet>/rest/common/v1/batch`, then a path of `/activities` will mean a request against `<servlet>/rest/common/v1/activities`. The path must start with `/` and cannot contain whitespace.",
            "minLength": 1,
            "pattern": "^/[\\S]*$",
            "title": "Path",
            "type": "string"
          },
          "query": {
            "description": "The query string to use for the subrequest",
            "title": "Query",
            "type": "string"
          }
        },
        "required": ["method", "path"],
        "title": "Batch subrequest",
        "type": "object"
      },
      "BatchSubResponse": {
        "description": "A subresponse to a batch subrequest",
        "properties": {
          "body": {
            "description": "The body of the subresponse",
            "title": "Body",
            "type": "object"
          },
          "code": {
            "description": "The HTTP status code for the subresponse",
            "title": "Code",
            "type": "integer"
          },
          "headers": {
            "description": "The headers returned for the subresponse",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "title": "Headers",
            "type": "array"
          },
          "skipped": {
            "description": "A `true` value indicates that the corresponding subrequest was not processed due to a prior failed request that specified the `onFail` field with the `abort` option",
            "title": "Skipped",
            "type": "boolean"
          }
        },
        "title": "Batch subresponse",
        "type": "object"
      },
      "CoverageIssue": {
        "description": "A potential problem related to coverage",
        "properties": {
          "coverageSubtype": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The type of coverage this issue relates to",
            "nullable": true,
            "title": "Coverage subtype",
            "x-gw-typelist": "CoverageSubtype"
          },
          "id": {
            "description": "The unique identifier of this element",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "reason": {
            "description": "The reason this issue was raised",
            "maxLength": 65000,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Reason",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The severity of the issue",
            "title": "Severity",
            "x-gw-typelist": "CoverageIssueSeverity"
          }
        },
        "title": "Coverage issue",
        "type": "object"
      },
      "Document": {
        "description": "A `Document` represents a document within the application, which can have additional metadata such as the author of the document or a specific security level. The actual contents of the document are generally stored in a separate document management system that this application is linked to.",
        "properties": {
          "author": {
            "description": "The name of the person who created this document",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Author",
            "type": "string"
          },
          "dateModified": {
            "description": "The date and time that this `Document` was most recently updated",
            "format": "date-time",
            "readOnly": true,
            "title": "Date modified",
            "type": "string"
          },
          "description": {
            "description": "A description of this document",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Description",
            "type": "string"
          },
          "docUID": {
            "description": "The unique identifier for this `Document` in the linked document management system. The exact format of the identifier depends upon the specifics of the document management system the application is linked to.",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Document UID",
            "type": "string",
            "x-gw-createOnly": true,
            "x-gw-defaultViews": ["detail"]
          },
          "id": {
            "description": "The unique identifier of this `Document`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "inbound": {
            "description": "This field indicates whether this document is considered to be inbound, outbound, or neither",
            "nullable": true,
            "title": "Inbound",
            "type": "boolean"
          },
          "language": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The language in which this document was produced",
            "nullable": true,
            "title": "Language",
            "x-gw-typelist": "LanguageType"
          },
          "mimeType": {
            "description": "The MIME type of this document, such as `application/msword` for a Microsoft Word document",
            "maxLength": 80,
            "minLength": 1,
            "pattern": "\\S",
            "title": "MIME type",
            "type": "string"
          },
          "name": {
            "description": "The name of this document",
            "maxLength": 80,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Name",
            "type": "string"
          },
          "obsolete": {
            "description": "Setting this field to `true` indicates that the information in this document can no longer be relied upon to be current and relevant. This is often used instead of deletion to preserve history.",
            "nullable": true,
            "title": "Obsolete",
            "type": "boolean"
          },
          "recipient": {
            "description": "The name of the intended recipient of this document",
            "maxLength": 60,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Recipient",
            "type": "string"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "A reference to the element that this document is related to",
            "title": "Related to"
          },
          "section": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The section to which this document belongs",
            "nullable": true,
            "title": "Section",
            "x-gw-typelist": "DocumentSection"
          },
          "securityType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The security level that has been assigned to this document",
            "nullable": true,
            "title": "Security type",
            "x-gw-typelist": "DocumentSecurityType"
          },
          "status": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The current status of this document, such as `draft` or `approved`",
            "title": "Status",
            "x-gw-typelist": "DocumentStatusType"
          },
          "type": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The specific type of document",
            "title": "Type",
            "x-gw-typelist": "DocumentType"
          }
        },
        "title": "Document",
        "type": "object",
        "x-gw-filterable": ["name", "section", "status"],
        "x-gw-requiredForCreate": ["name", "status", "type"],
        "x-gw-sortable": ["dateModified", "name"]
      },
      "DocumentContent": {
        "description": "The contents of a `Document`",
        "properties": {
          "contents": {
            "description": "The contents of this document as a Base64-encoded string",
            "format": "byte",
            "readOnly": true,
            "title": "Contents",
            "type": "string"
          },
          "responseMimeType": {
            "description": "The MIME type of this document's contents, such as `application/msword` for a Microsoft Word document",
            "readOnly": true,
            "title": "Response MIME type",
            "type": "string"
          },
          "url": {
            "description": "The URL of this document within the linked document management system",
            "readOnly": true,
            "title": "URL",
            "type": "string"
          }
        },
        "title": "Document content",
        "type": "object"
      },
      "DocumentContentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/DocumentContent"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "DocumentContentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentContentData"
          }
        },
        "type": "object"
      },
      "DocumentData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Document"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "DocumentRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentData"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "DocumentResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentData"
          },
          "included": {
            "$ref": "#/components/schemas/DocumentResponseInclusions"
          }
        },
        "type": "object"
      },
      "DocumentResponseInclusions": {
        "properties": {
          "DocumentContent": {
            "items": {
              "$ref": "#/components/schemas/DocumentContentData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GenericRelation": {
        "description": "A reference to a related element",
        "properties": {
          "displayName": {
            "description": "The formatted name of the referenced element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": ["none"]
          },
          "type": {
            "description": "The type of the referenced element",
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["id", "type"],
        "title": "Generic relation",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "Header": {
        "description": "An HTTP request or response header",
        "properties": {
          "name": {
            "description": "The header name",
            "title": "Name",
            "type": "string"
          },
          "value": {
            "description": "The header value",
            "title": "Value",
            "type": "string"
          }
        },
        "required": ["name", "value"],
        "title": "Header",
        "type": "object"
      },
      "LinkObject": {
        "description": "A standard HTTP link",
        "properties": {
          "href": {
            "description": "The URL of the link",
            "title": "HREF",
            "type": "string"
          },
          "methods": {
            "description": "An array of HTTP method names that can be used with the link URL",
            "items": {
              "type": "string"
            },
            "title": "Methods",
            "type": "array"
          }
        },
        "title": "Linked object",
        "type": "object"
      },
      "Links": {
        "additionalProperties": {
          "$ref": "#/components/schemas/LinkObject",
          "description": "A set of named links. Each key represents the name of the link, such as a child of the current element, an action that can be taken on it, or a navigation option.",
          "title": "Links"
        },
        "description": "A set of named links",
        "title": "Links",
        "type": "object"
      },
      "Note": {
        "description": "A `Note` is used to capture any sort of additional text that needs to be associated with another business object. A `Note` consists of a `body` that contains the actual text of the note, along with other fields the represent additional metadata about the note.",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/SimpleReference",
            "description": "The `User` who authored this note",
            "readOnly": true,
            "title": "Author",
            "x-gw-reference-schema": "User",
            "x-gw-referenceType": "User"
          },
          "body": {
            "description": "The text of this note",
            "maxLength": 65000,
            "minLength": 1,
            "pattern": "\\S",
            "title": "Body",
            "type": "string",
            "x-gw-defaultViews": ["detail"]
          },
          "bodySummary": {
            "description": "A shorter summary of this note's `body` field, more suitable for displaying in a list of notes",
            "readOnly": true,
            "title": "Body summary",
            "type": "string",
            "x-gw-defaultViews": ["summary"]
          },
          "confidential": {
            "description": "A `true` value for this field indicates that the note contains confidential information",
            "title": "Confidential",
            "type": "boolean"
          },
          "createdDate": {
            "description": "The date and time that this `Note` was created",
            "format": "date-time",
            "readOnly": true,
            "title": "Created date",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of this `Note`",
            "readOnly": true,
            "title": "ID",
            "type": "string"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/GenericRelation",
            "description": "A reference to the element that this note is related to",
            "title": "Related to"
          },
          "securityType": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The security level that has been assigned to this note",
            "nullable": true,
            "title": "Security type",
            "x-gw-typelist": "NoteSecurityType"
          },
          "subject": {
            "description": "The subject of this note",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true,
            "pattern": "\\S",
            "title": "Subject",
            "type": "string"
          },
          "topic": {
            "$ref": "#/components/schemas/TypeKeyReference",
            "description": "The topic of this note",
            "title": "Topic",
            "x-gw-typelist": "NoteTopicType"
          },
          "updateTime": {
            "description": "The date and time when this `Note` was most recently updated",
            "format": "date-time",
            "readOnly": true,
            "title": "Update time",
            "type": "string"
          }
        },
        "title": "Note",
        "type": "object",
        "x-gw-filterable": ["body", "subject", "topic"],
        "x-gw-requiredForCreate": ["body"],
        "x-gw-sortable": ["subject", "topic", "updateTime"]
      },
      "NoteData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/Note"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "NoteList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to determine if additional pages of results are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/NoteData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included on responses if the `includeTotal` query parameter is used to request that the `total` be calculated.  Capped at 1000.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NoteRequest": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NoteData"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "NoteResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NoteData"
          },
          "included": {
            "$ref": "#/components/schemas/ActivityResponseInclusions"
          }
        },
        "type": "object"
      },
      "RelatedCollection": {
        "description": "A set of element references that are related to the element in some way. Used to link elements with their relations when a request is made using the `include` query parameter.",
        "properties": {
          "count": {
            "description": "The number of elements included in the `data` array",
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "description": "The list of references to the related elements",
            "items": {
              "$ref": "#/components/schemas/SimpleReference"
            },
            "title": "Data",
            "type": "array"
          },
          "total": {
            "description": "The total number of elements in the related set of elements. Only present if the `includeTotal` query parameter is used to request that the total be calculated for an included collection.",
            "title": "Total",
            "type": "integer"
          }
        },
        "title": "Related collection",
        "type": "object"
      },
      "RelatedCollections": {
        "additionalProperties": {
          "$ref": "#/components/schemas/RelatedCollection",
          "description": "The related collections. Each key in this object will match the name of the inclusion requested via the `include` query parameter.",
          "title": "Related collections"
        },
        "description": "A set of `RelatedCollection` elements that contain references to elements included using the `include` query parameter on a request",
        "title": "Related collections",
        "type": "object"
      },
      "SimpleReference": {
        "description": "A reference to an element",
        "properties": {
          "displayName": {
            "description": "The formatted name of the element",
            "title": "Display name",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the referenced element",
            "title": "ID",
            "type": "string"
          },
          "jsonPath": {
            "description": "The path to the referenced element within the overall JSON document",
            "readOnly": true,
            "title": "JSON path",
            "type": "string",
            "x-gw-defaultViews": ["none"]
          },
          "refid": {
            "description": "A unique identifier given to the newly created element in the context of the current request",
            "title": "Reference ID",
            "type": "string"
          },
          "type": {
            "description": "The type of the referenced element",
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI for the referenced element",
            "title": "URI",
            "type": "string"
          }
        },
        "title": "Simple reference",
        "type": "object",
        "x-gw-resourceReference": true
      },
      "TypeFilter": {
        "description": "A `TypeFilter` represents a filtered set of the `TypeKey` values from a `TypeList`",
        "properties": {
          "description": {
            "description": "The description of this `TypeFilter`",
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "The name of this `TypeFilter`",
            "title": "Name",
            "type": "string"
          },
          "typeKeys": {
            "description": "The `code` values for the `TypeKeys` that are included by this `TypeFilter`",
            "items": {
              "type": "string"
            },
            "title": "TypeKeys",
            "type": "array",
            "x-gw-defaultViews": ["detail"]
          }
        },
        "title": "TypeFilter",
        "type": "object"
      },
      "TypeKey": {
        "description": "A `TypeKey` represents one of the possible enumerated values of a `TypeList`",
        "properties": {
          "categories": {
            "description": "The categories that this `TypeKey` belongs to. Categories are formatted by combining the name of the `TypeList` with the `code` for its `TypeKey`, separated by a `.` character.",
            "items": {
              "type": "string"
            },
            "title": "Categories",
            "type": "array",
            "x-gw-defaultViews": ["none"]
          },
          "code": {
            "description": "The code for this `TypeKey`. `TypeKey` codes are unique within a `TypeList`.",
            "title": "Code",
            "type": "string"
          },
          "description": {
            "description": "The longer description of this `TypeKey`",
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "The human-readable name of this `TypeKey`",
            "title": "Name",
            "type": "string"
          },
          "priority": {
            "description": "The order of this `TypeKey` relative to other `TypeKeys` in the same `TypeList`. A `TypeKey` with a lower `priority` will appear before a `TypeKey` with a higher priority when the values for a `TypeList` are presented in sorted order.",
            "title": "Priority",
            "type": "integer"
          },
          "retired": {
            "description": "A `true` value for this field indicates that the `TypeKey` value should no longer be used. Retired `TypeKey` values are retained only for the sake of historical data that may already be using the `TypeKey`.",
            "title": "Retried",
            "type": "boolean",
            "x-gw-defaultViews": ["none"]
          }
        },
        "title": "TypeKey",
        "type": "object"
      },
      "TypeKeyReference": {
        "description": "A reference to a `TypeKey` element that defines an enumerated value from a `TypeList`",
        "properties": {
          "code": {
            "description": "The `code` of the `TypeKey`",
            "title": "Code",
            "type": "string"
          },
          "name": {
            "description": "The `name` of the `TypeKey`",
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["code"],
        "title": "TypeKey reference",
        "type": "object"
      },
      "TypeList": {
        "description": "A `TypeList` represents a list of enumerated `TypeKey` values",
        "properties": {
          "description": {
            "description": "The description of this `TypeList`",
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "The name of this `TypeList`",
            "title": "Name",
            "type": "string"
          },
          "typeFilters": {
            "description": "The set of `TypeFilters` available on this `TypeList`. A `TypeFilter` represents a filtered subset of the `TypeKeys` in this `TypeList`.",
            "items": {
              "$ref": "#/components/schemas/TypeFilter"
            },
            "title": "TypeFilters",
            "type": "array",
            "x-gw-defaultViews": ["detail"]
          },
          "typeKeys": {
            "description": "The list of `TypeKeys` available on this `TypeList`. A `TypeKey` represents one of the enumerated values that comprise this `TypeList`.",
            "items": {
              "$ref": "#/components/schemas/TypeKey"
            },
            "title": "TypeKeys",
            "type": "array",
            "x-gw-defaultViews": ["detail"]
          }
        },
        "title": "TypeList",
        "type": "object",
        "x-gw-filterable": ["name"],
        "x-gw-sortable": ["name"]
      },
      "TypeListData": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/TypeList"
          },
          "checksum": {
            "description": "A checksum for the element that can be used to prevent lost updates by detecting that the element has been updated since the caller last retrieved it. See the Cloud API documentation for more information about lost update prevention.",
            "title": "Checksum",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the element",
            "title": "ID",
            "type": "string"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the specific element, including child elements and actions that can be taken on the element. Links are sensitive to both the caller's permissions and the state of the data. Only applicable to response envelopes.",
            "readOnly": true,
            "title": "Links"
          },
          "method": {
            "description": "The HTTP method that should be used for an included element. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "enum": ["post", "patch"],
            "title": "Method",
            "type": "string"
          },
          "refid": {
            "description": "Used to assign a temporary identifier to an element created using request inclusion. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "Reference ID",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedCollections",
            "description": "Information about collections and elements related to this element that have been included on the response due to use of the `include` query parameter on the request. Only applicable to response envelopes. See the Cloud API documentation for more information about read inclusion.",
            "readOnly": true,
            "title": "Related"
          },
          "type": {
            "description": "The type of this element",
            "readOnly": true,
            "title": "Type",
            "type": "string"
          },
          "uri": {
            "description": "The URI for an included element, representing the parent to create the element on if the `method` is `post` or the element to update if the `method` is `patch`. Only applicable to request envelopes. See the Cloud API documentation for more information about request inclusion.",
            "title": "URI",
            "type": "string"
          }
        },
        "required": ["attributes"],
        "type": "object"
      },
      "TypeListList": {
        "properties": {
          "count": {
            "description": "The number of elements currently being returned. This may be less than the total number of elements. Pagination links under the `links` property can be used to determine if additional pages of results are available.",
            "readOnly": true,
            "title": "Count",
            "type": "integer"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/TypeListData"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "description": "Links related to the overall list of elements, used to paginate the list",
            "readOnly": true,
            "title": "Links"
          },
          "total": {
            "description": "The total number of elements available, which may be greater than the `count` of elements currently being returned. Only included on responses if the `includeTotal` query parameter is used to request that the `total` be calculated.  Capped at 1000.",
            "readOnly": true,
            "title": "Total",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TypeListResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TypeListData"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "APIs for common InsuranceSuite platform objects like activities and notes",
    "title": "Common API",
    "version": "1.3.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/activities": {
      "get": {
        "description": "Retrieves the `Activity` elements that are assigned to the caller",
        "operationId": "getActivities",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityList"
                }
              }
            },
            "description": "The paginated list of `Activity` elements"
          }
        },
        "summary": "Retrieve the Activity elements that are assigned to the caller",
        "x-gw-childResourceType": "Activity",
        "x-gw-resourceType": "Activities"
      }
    },
    "/activities/{activityId}": {
      "get": {
        "description": "Retrieves an `Activity` by its `id`. An `Activity` is an assignable item that represents a task to be done, a decision to be made, or information to be aware of.",
        "operationId": "getActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            },
            "description": "The details of the `Activity`"
          }
        },
        "summary": "Retrieve an Activity",
        "x-gw-resourceType": "Activity"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/activityId"
        }
      ],
      "patch": {
        "description": "Updates an `Activity`. Only allowed if the `Activity` has a `status` of `open`.",
        "operationId": "updateActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityRequest"
              }
            }
          },
          "description": "The fields to update on the `Activity`",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            },
            "description": "The details of the updated `Activity`"
          }
        },
        "summary": "Update an Activity",
        "x-gw-resourceType": "Activity"
      }
    },
    "/activities/{activityId}/approve": {
      "parameters": [
        {
          "$ref": "#/components/parameters/activityId"
        }
      ],
      "post": {
        "description": "Marks the `Activity` as approved, setting `approved` to `true, `status` to `completed`, and updating the `closeDate` and `closeUser`. Only applicable if the `Activity` has an `activityType` of `approval` and has not yet been approved or rejected.",
        "operationId": "approveActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityApprovalRequest"
              }
            }
          },
          "description": "Additional details of the approval such as the `approvalRationale`"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            },
            "description": "The details of the updated `Activity`"
          }
        },
        "summary": "Approve an Activity",
        "x-gw-resourceType": "Activity"
      }
    },
    "/activities/{activityId}/assign": {
      "parameters": [
        {
          "$ref": "#/components/parameters/activityId"
        }
      ],
      "post": {
        "description": "Assigns or re-assigns an `Activity`",
        "operationId": "assignActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityAssignmentRequest"
              }
            }
          },
          "description": "Specifies the `Assignee` that the `Activity` should be assigned to",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            },
            "description": "The details of the updated `Activity`"
          }
        },
        "summary": "Assign an Activity",
        "x-gw-resourceType": "Activity"
      }
    },
    "/activities/{activityId}/assignees": {
      "get": {
        "description": "Retrieves the suggested `Assignee` elements for an `Activity`. An `Assignee` represents the target for an `assign` action. That target can be a concrete assignment request, such as a specific `User` and `Group`, or it can be a request for rule-based assignment, such as automatically determining the assignment or assigning based on specific roles.",
        "operationId": "getActivitySuggestedAssignees",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssigneeList"
                }
              }
            },
            "description": "The paginated list of suggested `Assignee` elements for this `Activity`"
          }
        },
        "summary": "Retrieve the suggested Assignee elements for an Activity",
        "x-gw-childResourceType": "Assignee",
        "x-gw-resourceType": "ActivityAssignees"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/activityId"
        }
      ]
    },
    "/activities/{activityId}/complete": {
      "parameters": [
        {
          "$ref": "#/components/parameters/activityId"
        }
      ],
      "post": {
        "description": "Marks an `Activity` as completed, setting the `status` to `complete` and updating the `closeDate` and `closeUser`. Only allowed if the `Activity` has a `status` of `open`, has been assigned to a specific `User`, and has an `activityType` of `general` or `approvaldenied`.",
        "operationId": "completeActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityActionRequest"
              }
            }
          },
          "description": "A request body can be sent in order to use the `included` feature of the request envelope to update or create additional elements when completing the `Activity`, such as attaching a `Note` to include details of what was done."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            },
            "description": "The details of the updated `Activity`"
          }
        },
        "summary": "Complete an Activity",
        "x-gw-resourceType": "Activity"
      }
    },
    "/activities/{activityId}/notes": {
      "get": {
        "description": "Retrieves the `Note` elements for an `Activity`",
        "operationId": "getActivityNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteList"
                }
              }
            },
            "description": "The paginated list of `Note` elements for the `Activity`."
          }
        },
        "summary": "Retrieve the Note elements for an Activity",
        "x-gw-childResourceType": "Note",
        "x-gw-resourceType": "ActivityNotes"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/activityId"
        }
      ],
      "post": {
        "description": "Creates a new `Note` and associates it with an `Activity`",
        "operationId": "createActivityNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteRequest"
              }
            }
          },
          "description": "The details of the `Note` to create",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            },
            "description": "The details of the newly created `Note`"
          }
        },
        "summary": "Create a Note on an Activity",
        "x-gw-childResourceType": "Note",
        "x-gw-resourceType": "ActivityNotes"
      }
    },
    "/activities/{activityId}/skip": {
      "parameters": [
        {
          "$ref": "#/components/parameters/activityId"
        }
      ],
      "post": {
        "description": "Marks an `Activity` as skipped, setting the `status` to `skipped` and updating the `closeDate` and `closeUser`. Only allowed if the `Activity` is not marked as mandatory, has a `status` of `open`, has been assigned to a specific `User`, and has an `activityType` of `general` or `approvaldenied`.",
        "operationId": "skipActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityActionRequest"
              }
            }
          },
          "description": "A request body can be sent in order to use the `included` feature of the request envelope to update or create additional elements when completing the `Activity`, such as attaching a `Note` to include a reason for why the `Activity` was skipped."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResponse"
                }
              }
            },
            "description": "The details of the updated `Activity`"
          }
        },
        "summary": "Skip an Activity",
        "x-gw-resourceType": "Activity"
      }
    },
    "/batch": {
      "post": {
        "description": "Post a list of subrequests to make against this endpoint. Subrequests will be executed serially, in the order they are specified in the \"requests\" property of the input. Responses to each subrequest will then be batched up and returned all together. Subrequests inherit the headers from the main request, with the exception of the GW-Checksum header, but headers can be specified on the subrequest and will override any headers from the main request.",
        "operationId": "batchRequest",
        "parameters": [
          {
            "description": "Controls what response headers, if any, are included for subresponses. If unspecified, or set to the value \"*all\", all headers for subresponses will be returned. If set to the value \"*none\", no headers for subresponses will be returned. Otherwise, this parameter can consist of a comma-separated list of the names of headers that should be included on subresponses.",
            "explode": false,
            "in": "query",
            "name": "includeResponseHeaders",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequest"
              }
            }
          },
          "description": "The body of the batch request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            },
            "description": "The batch request itself was well-formed; individual subrequests may have succeeded or failed"
          }
        },
        "summary": "Issue multiple requests at once as a non-transactional batch"
      }
    },
    "/documents/{documentId}": {
      "delete": {
        "description": "Deletes a `Document`",
        "operationId": "deleteDocument",
        "responses": {
          "204": {
            "description": "Indicates that the `Document` was successfully deleted"
          }
        },
        "summary": "Delete a Document",
        "x-gw-resourceType": "Document"
      },
      "get": {
        "description": "Retrieves a `Document` by its `id`. A `Document` represents a document within the application, which can have additional metadata such as the author of the document or a specific security level. The actual contents of the document are generally stored in a separate document management system that this application is linked to.",
        "operationId": "getDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            },
            "description": "The details of the `Document`"
          }
        },
        "summary": "Retrieve a Document",
        "x-gw-resourceType": "Document"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "patch": {
        "description": "Updates a `Document`. Can be used to update the metadata about the `Document`, the contents of the `Document, or both.",
        "operationId": "patchDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "content": {
                    "format": "binary",
                    "type": "string"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/DocumentRequest"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            },
            "description": "The details of the updated `Document`"
          }
        },
        "summary": "Update a Document",
        "x-gw-resourceType": "Document"
      }
    },
    "/documents/{documentId}/content": {
      "get": {
        "description": "Retrieves the contents of a `Document` as a Base64-encoded string",
        "operationId": "getDocumentContent",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentContentResponse"
                }
              }
            },
            "description": "The contents of the `Document` as a Base64-encoded string"
          }
        },
        "summary": "Retrieve the contents of a Document",
        "x-gw-resourceType": "DocumentContent"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ]
    },
    "/notes/{noteId}": {
      "delete": {
        "description": "Deletes a `Note`",
        "operationId": "deleteNote",
        "responses": {
          "204": {
            "description": "Indicates that the `Note` was successfully deleted"
          }
        },
        "summary": "Delete a Note",
        "x-gw-resourceType": "Note"
      },
      "get": {
        "description": "Retrieves a `Note` by its `id`",
        "operationId": "getNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            },
            "description": "The details of the `Note`"
          }
        },
        "summary": "Retrieve a Note",
        "x-gw-resourceType": "Note"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/noteId"
        }
      ],
      "patch": {
        "description": "Updates a `Note`",
        "operationId": "updateNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteRequest"
              }
            }
          },
          "description": "The fields to update on the `Note`",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            },
            "description": "The details of the updated `Note`"
          }
        },
        "summary": "Update a Note",
        "x-gw-resourceType": "Note"
      }
    },
    "/openapi.json": {
      "get": {
        "description": "Retrieves the `OpenAPI 3.0` schema for this API",
        "operationId": "getOpenApiSchema",
        "parameters": [
          {
            "$ref": "#/components/parameters/prettyPrintSchema"
          },
          {
            "$ref": "#/components/parameters/filterByUser"
          },
          {
            "$ref": "#/components/parameters/enablePolymorphism"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The `OpenAPI 3.0` schema for this API"
          }
        },
        "summary": "Retrieve the OpenAPI 3.0 schema for this API",
        "x-gw-resourceType": "CommonOpenApiSchema"
      }
    },
    "/swagger.json": {
      "get": {
        "description": "Returns a Swagger 2.0 schema for this API as json",
        "operationId": "generateDocs",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "summary": "Returns the Swagger schema for this API"
      }
    },
    "/typelists": {
      "get": {
        "description": "Retrieves all `TypeList` elements",
        "operationId": "getTypeLists",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageOffset"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeListList"
                }
              }
            },
            "description": "The paginated list of `TypeList` elements"
          }
        },
        "summary": "Retrieve all TypeList elements",
        "x-gw-childResourceType": "TypeList",
        "x-gw-resourceType": "TypeLists"
      }
    },
    "/typelists/{typelist}": {
      "get": {
        "description": "Retrieves a `TypeList` by `name`. A `TypeList` represents a list of enumerated `TypeKey` values.",
        "operationId": "getTypeList",
        "parameters": [
          {
            "description": "Indicates whether retired `TypeKey` elements should be included in the response. Defaults to `false`.",
            "in": "query",
            "name": "includeRetired",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filters the `typeKeys` array on the response. The query parameter's value should be of the form  `typekeyFilter=<field>:<operator>:<value>`. Valid filter fields include `code`, `category`, `name`, `priority`, and `retired`. See the Cloud API documentation for more information.",
            "explode": true,
            "in": "query",
            "name": "typekeyFilter",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Sorts the `typeKeys` array on the response. The query parameter's value should be of the form `typekeySort=<fields>`, where `<fields>` is a comma-separated list of fields to sort on. Valid sort fields include `code`, `name`, `retired`, and `priority`. See the Cloud API documentation for more information.",
            "explode": false,
            "in": "query",
            "name": "typekeySort",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/includeTotal"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeListResponse"
                }
              }
            },
            "description": "The details of the `TypeList`"
          }
        },
        "summary": "Retrieve a TypeList",
        "x-gw-resourceType": "TypeList"
      },
      "parameters": [
        {
          "description": "The `name` of the `TypeList`",
          "in": "path",
          "name": "typelist",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8080/cc/rest/common/v1"
    }
  ]
}
