{
  "swagger": "2.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "cicd-manager-service.api.dev.ccs.guidewire.net",
  "basePath": "/",
  "tags": {},
  "paths": {
    "/api/v1/configparameters/{configParametersId}/environmentconfig": {
      "patch": {
        "summary": "Patch Environment Config Parameters",
        "operationId": "Patch Environment Config Parameters",
        "consumes": ["application/json-patch+json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonPatchExample"
              }
            }
          },
          {
            "name": "configParametersId",
            "in": "path",
            "description": "A case-insensitive, colon-separated triplet identifying config parameters item by GCC tenant name, GCC project name and application ID: '[GCC tenant name]:[GCC project name]:[application ID]'",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config Parameters was updated",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "spring_oauth": ["groups"]
          },
          {
            "oAuthSample": ["openid"]
          }
        ],
        "deprecated": true
      }
    }
  },
  "securityDefinitions": {
    "spring_oauth": {
      "type": "oauth2",
      "authorizationUrl": "https://guidewire-hub.oktapreview.com/oauth2/ausj9ftnbxOqfGU4U0h7/v1/authorize",
      "tokenUrl": "https://guidewire-hub.oktapreview.com/oauth2/ausj9ftnbxOqfGU4U0h7/v1/token",
      "flow": "accessCode",
      "scopes": {
        "groups": "Obtains group memberships"
      }
    }
  },
  "definitions": {
    "ApiTestBenchDTO": {
      "type": "object",
      "required": ["apiTestsBuildEnabled", "finishBuildTriggerEnabled"],
      "properties": {
        "apiTestsBuildEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Is Api Test Bench build enabled."
        },
        "finishBuildTriggerEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Is finish build trigger enabled."
        }
      },
      "title": "ApiTestBenchDTO"
    },
    "ApiTestBenchV2DTO": {
      "type": "object",
      "required": ["apiTestsBuildEnabled", "finishBuildTriggerEnabled"],
      "properties": {
        "apiTestsBuildEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the API Tests build be enabled."
        },
        "finishBuildTriggerEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the API Tests build run automatically after the Build Application build is finished."
        }
      },
      "title": "ApiTestBenchV2DTO"
    },
    "BaseProjectDTO": {
      "type": "object",
      "required": ["name", "version"],
      "properties": {
        "name": {
          "type": "string",
          "example": "ClaimCenter",
          "description": "Base project name."
        },
        "version": {
          "type": "string",
          "example": "2.0.6",
          "description": "Version of the base project."
        }
      },
      "title": "BaseProjectDTO"
    },
    "BehaviorTestDTO": {
      "type": "object",
      "required": ["suites"],
      "properties": {
        "buildEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Behavior Test build be enabled"
        },
        "suites": {
          "type": "array",
          "example": [
            {
              "suiteName": "com.guidewire.test.ExampleSuite",
              "preMerge": true,
              "postMerge": false
            }
          ],
          "description": "List of test suites.",
          "items": {
            "$ref": "#/definitions/GunitTestSuiteDTO"
          }
        },
        "vcsTriggerEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the tests run automatically on any change in code (for all branches except gw-releases)"
        },
        "verifySuitesPresenceEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the configured test suites presence in the codebase be verified prior to running tests, failing in case any test suite is not found."
        }
      },
      "title": "BehaviorTestDTO"
    },
    "BehaviorTestV2DTO": {
      "type": "object",
      "required": ["suites"],
      "properties": {
        "buildEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Behavior Test build be enabled."
        },
        "suites": {
          "type": "array",
          "example": [
            {
              "suiteName": "com.guidewire.test.ExampleSuite",
              "preMerge": true,
              "postMerge": false
            }
          ],
          "description": "List of test suites.",
          "items": {
            "$ref": "#/definitions/TestSuiteDTO"
          }
        },
        "vcsTriggerEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Behavior Tests run automatically on any change in code (for all branches except gw-releases)."
        },
        "verifySuitesPresenceEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the configured test suites presence in the codebase be verified prior to running tests, failing in the case any of the configured test suites is not found."
        }
      },
      "title": "BehaviorTestV2DTO"
    },
    "BitBucketDTO": {
      "type": "object",
      "required": ["buildNotification", "internalUrl"],
      "properties": {
        "buildNotification": {
          "example": "null",
          "$ref": "#/definitions/BuildNotificationDTO"
        },
        "internalUrl": {
          "type": "string",
          "example": "http://bitbucket.bitbucket-acme:7990",
          "description": "BitBucket URL address."
        }
      },
      "title": "BitBucketDTO"
    },
    "BitBucketV2DTO": {
      "type": "object",
      "required": ["buildNotification", "internalUrl"],
      "properties": {
        "buildNotification": {
          "example": "null",
          "$ref": "#/definitions/BuildNotificationV2DTO"
        },
        "internalUrl": {
          "type": "string",
          "example": "http://bitbucket.bitbucket-acme:7990",
          "description": "BitBucket (internal) URL."
        }
      },
      "title": "BitBucketV2DTO"
    },
    "BuildDTO": {
      "type": "object",
      "required": ["buildType"],
      "properties": {
        "buildType": {
          "type": "string",
          "example": "null",
          "enum": [
            "SERVER_TEST",
            "SMOKE_TEST",
            "BEHAVIOR_TEST",
            "API_TEST",
            "DOCKERIZE_IS"
          ]
        },
        "parameters": {
          "type": "object",
          "example": "null",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "BuildDTO"
    },
    "BuildNotificationDTO": {
      "type": "object",
      "required": ["token", "user"],
      "properties": {
        "token": {
          "type": "string",
          "example": "build-notification",
          "description": "Authentication token for BitBucket."
        },
        "user": {
          "type": "string",
          "example": "build-notification",
          "description": "Name of the BitBucket user."
        }
      },
      "title": "BuildNotificationDTO"
    },
    "BuildNotificationV2DTO": {
      "type": "object",
      "required": ["token", "user"],
      "properties": {
        "token": {
          "type": "string",
          "example": "build-notification",
          "description": "Authentication token for the BitBucket user used for the commit status publisher feature."
        },
        "user": {
          "type": "string",
          "example": "build-notification",
          "description": "Name of the BitBucket user used for the commit status publisher feature."
        }
      },
      "title": "BuildNotificationV2DTO"
    },
    "BuildScheduleDTO": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "branchFilter": {
          "type": "string",
          "example": "+:<default>",
          "description": "Denotes which branches of the application should be included in the Build Schedule. The parameter uses the TeamCity branch filter notation."
        },
        "builds": {
          "type": "array",
          "example": "null",
          "items": {
            "$ref": "#/definitions/BuildDTO"
          }
        },
        "cron": {
          "example": "null",
          "$ref": "#/definitions/CronPropertiesDTO"
        },
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Build Schedule be enabled."
        },
        "id": {
          "type": "string",
          "example": "daily_pc_build",
          "description": "Schedule id"
        },
        "name": {
          "type": "string",
          "example": "Daily PC build",
          "description": "Schedule name"
        },
        "withPendingChangesOnly": {
          "type": "boolean",
          "example": false,
          "description": "Should builds be triggeredd only on branches with pending changes."
        }
      },
      "title": "BuildScheduleDTO"
    },
    "BuildScheduleViewDTO": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "CC",
          "description": "ID of the application to which the Build Schedule applies, unique within a tenant and star system pair."
        },
        "branchFilter": {
          "type": "string",
          "example": "+:<default>",
          "description": "Denotes which branches of the application should be included in the Build Schedule. The parameter uses the TeamCity branch filter notation."
        },
        "builds": {
          "type": "array",
          "example": "null",
          "items": {
            "$ref": "#/definitions/BuildDTO"
          }
        },
        "ciCdConfigType": {
          "type": "string",
          "example": "null",
          "enum": [
            "PC",
            "BC",
            "CC",
            "CM",
            "PORTALS",
            "GT_FRAMEWORK",
            "JUTRO_APP"
          ]
        },
        "cron": {
          "example": "null",
          "$ref": "#/definitions/CronPropertiesDTO"
        },
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Build Schedule be enabled."
        },
        "id": {
          "type": "string",
          "example": "daily_pc_build",
          "description": "Schedule id"
        },
        "name": {
          "type": "string",
          "example": "Daily PC build",
          "description": "Schedule name"
        },
        "withPendingChangesOnly": {
          "type": "boolean",
          "example": false,
          "description": "Should builds be triggeredd only on branches with pending changes."
        }
      },
      "title": "BuildScheduleViewDTO"
    },
    "CiCdApplicationDTO": {
      "type": "object",
      "required": ["applicationId", "ciCdConfigType"],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "CC",
          "description": "ID of the application to which the CICD configuration applies, unique within a tenant and star system pair."
        },
        "ciCdConfigType": {
          "type": "string",
          "example": "CC",
          "enum": [
            "PC",
            "BC",
            "CC",
            "CM",
            "PORTALS",
            "GT_FRAMEWORK",
            "JUTRO_APP"
          ]
        }
      },
      "title": "CiCdApplicationDTO"
    },
    "CiCdConfigurationDTO": {
      "type": "object",
      "required": [
        "ciCdConfigType",
        "insurerConfig",
        "internalConfig",
        "starSystemId",
        "tenantId"
      ],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "CC",
          "description": "ID of the application to which the CICD configuration applies, unique within a tenant and star system pair."
        },
        "ciCdConfigType": {
          "type": "string",
          "example": "CC",
          "enum": [
            "PC",
            "BC",
            "CC",
            "CM",
            "PORTALS",
            "GT_FRAMEWORK",
            "JUTRO_APP"
          ]
        },
        "insurerConfig": {
          "example": "null",
          "$ref": "#/definitions/InsurerConfigDTO"
        },
        "internalConfig": {
          "example": "null",
          "$ref": "#/definitions/InternalConfigDTO"
        },
        "starSystemId": {
          "type": "string",
          "example": "iscs",
          "description": "ID of the star system aka (GCC) project to which the CICD configuration applies, unique within a single tenant."
        },
        "tenantId": {
          "type": "string",
          "example": "sopot-insurancesuite-cc",
          "description": "ID of the tenant to which the CICD configuration applies, unique within the single CICD Manager Service database."
        }
      },
      "title": "CiCdConfigurationDTO"
    },
    "CiCdConfigurationRequestDTO": {
      "type": "object",
      "required": ["ciCdConfigType", "insurerConfig", "internalConfig"],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "CC",
          "description": "ID of the application to which the CICD configuration applies, unique within a tenant and star system pair."
        },
        "ciCdConfigType": {
          "type": "string",
          "example": "CC",
          "enum": [
            "PC",
            "BC",
            "CC",
            "CM",
            "PORTALS",
            "GT_FRAMEWORK",
            "JUTRO_APP"
          ]
        },
        "insurerConfig": {
          "example": "null",
          "$ref": "#/definitions/InsurerConfigDTO"
        },
        "internalConfig": {
          "example": "null",
          "$ref": "#/definitions/InternalConfigDTO"
        }
      },
      "title": "CiCdConfigurationRequestDTO"
    },
    "CicdConfigDTO": {
      "type": "object",
      "properties": {
        "apiTestBench": {
          "example": "null",
          "$ref": "#/definitions/ApiTestBenchDTO"
        },
        "behaviorTests": {
          "example": "null",
          "$ref": "#/definitions/BehaviorTestDTO"
        },
        "gtFrameworkTest": {
          "example": "null",
          "$ref": "#/definitions/GtFrameworkTestDTO"
        },
        "gunitServerTests": {
          "example": "null",
          "$ref": "#/definitions/GunitTestDTO"
        },
        "gunitSmokeTests": {
          "example": "null",
          "$ref": "#/definitions/GunitSmokeTestDTO"
        },
        "jacocoScanBasePackages": {
          "type": "array",
          "example": ["com.example", "mytenant", "com.custom.base"],
          "description": "List of base packages for Jacoco code coverage scan. Code coverage will be perormed for specified and all nested packages.",
          "items": {
            "type": "string"
          }
        },
        "jacocoVersion": {
          "type": "string",
          "example": "0.8.5",
          "description": "Version of jacoco to use during GUnit tests."
        },
        "staticAnalysisBuild": {
          "example": "null",
          "$ref": "#/definitions/StaticAnalysisBuildDTO"
        },
        "testEnv": {
          "type": "string",
          "example": "h2mem",
          "description": "Value of \"env\" parameter for running tests. If not set or blank, framework-specific defaults will be used in TeamCity build configurations."
        },
        "updateBuild": {
          "example": "null",
          "$ref": "#/definitions/UpdateBuildDTO"
        },
        "verifyBlueGreenBuild": {
          "example": "null",
          "$ref": "#/definitions/VerifyBlueGreenBuildDTO"
        }
      },
      "title": "CicdConfigDTO"
    },
    "ConfigParametersDTO": {
      "type": "object",
      "required": ["cicdConfig", "environmentConfig", "gccProject", "tenant"],
      "properties": {
        "applicationId": {
          "type": "string",
          "example": "CC",
          "description": "Id of application, unique within tenant and project pair"
        },
        "ciConfigurationType": {
          "type": "string",
          "example": "CC",
          "description": "Type of CI pipeline configuration.",
          "enum": [
            "PC",
            "BC",
            "CC",
            "CM",
            "PORTALS",
            "GT_FRAMEWORK",
            "JUTRO_APP"
          ]
        },
        "cicdConfig": {
          "example": "null",
          "$ref": "#/definitions/CicdConfigDTO"
        },
        "environmentConfig": {
          "example": "null",
          "$ref": "#/definitions/EnvironmentConfigDTO"
        },
        "gccApplicationType": {
          "type": "string",
          "example": "CC",
          "description": "Guidewire Cloud Console project type.",
          "enum": [
            "PC",
            "BC",
            "CC",
            "CM",
            "PORTALS",
            "GT_FRAMEWORK",
            "JUTRO_APP"
          ]
        },
        "gccProject": {
          "type": "string",
          "example": "CCProject",
          "description": "Guidewire Cloud Console project name."
        },
        "tenant": {
          "type": "string",
          "example": "sopot-insurancesuite-cc",
          "description": "Name of the tenant."
        }
      },
      "title": "ConfigParametersDTO"
    },
    "CronPropertiesDTO": {
      "type": "object",
      "properties": {
        "dayOfMonth": {
          "type": "string",
          "example": "*",
          "description": "cron 'dayOfMonth' property."
        },
        "dayOfWeek": {
          "type": "string",
          "example": "?",
          "description": "cron 'dayOfWeek' property."
        },
        "hours": {
          "type": "string",
          "example": "*",
          "description": "cron 'hours' property."
        },
        "minutes": {
          "type": "string",
          "example": 0,
          "description": "cron 'minutes' property."
        },
        "month": {
          "type": "string",
          "example": "*",
          "description": "cron 'month' property."
        },
        "seconds": {
          "type": "string",
          "example": 0,
          "description": "cron 'seconds' property."
        },
        "timezone": {
          "type": "string",
          "example": "US/Pacific",
          "description": "Scheduler's timezone (set null for UTC)"
        },
        "year": {
          "type": "string",
          "example": "*",
          "description": "cron 'year' property."
        }
      },
      "title": "CronPropertiesDTO"
    },
    "DigitalApplicationsConfigDTO": {
      "type": "object",
      "properties": {
        "accessControlExposeHeaders": {
          "type": "array",
          "example": ["X-Custom-Header", "X-Another-Custom-Header"],
          "description": "List of safelisted response headers to be exposed via CORS",
          "items": {
            "type": "string"
          }
        },
        "buildNotificationEmail": {
          "type": "string",
          "example": "build.notification@email.com",
          "description": "Build notification email."
        },
        "deploymentType": {
          "type": "string",
          "example": "APIGW",
          "description": "Type of the digital application deployment.",
          "enum": ["APIGW", "CDN"]
        },
        "digitalApplications": {
          "type": "array",
          "example": ["producer-engage", "quote-and-buy"],
          "description": "List of digital applications.",
          "items": {
            "type": "string"
          }
        },
        "httpdVersion": {
          "type": "string",
          "example": "2.4.43",
          "description": "Httpd client version. Usage of 'alpine' will be enforced."
        },
        "slackNotifications": {
          "example": "null",
          "$ref": "#/definitions/SlackNotificationDTO"
        }
      },
      "title": "DigitalApplicationsConfigDTO"
    },
    "DigitalApplicationsConfigV2DTO": {
      "type": "object",
      "properties": {
        "accessControlExposeHeaders": {
          "type": "array",
          "example": ["X-Custom-Header", "X-Another-Custom-Header"],
          "description": "List of safelisted response headers to be exposed via CORS",
          "items": {
            "type": "string"
          }
        },
        "buildNotificationEmail": {
          "type": "string",
          "example": "build.notification@email.com",
          "description": "Build notification email."
        },
        "deploymentType": {
          "type": "string",
          "example": "APIGW",
          "description": "Type of the digital application deployment.",
          "enum": ["APIGW", "CDN"]
        },
        "digitalApplications": {
          "type": "array",
          "example": ["producer-engage", "quote-and-buy"],
          "description": "List of digital applications.",
          "items": {
            "type": "string"
          }
        },
        "httpdVersion": {
          "type": "string",
          "example": "2.4.43",
          "description": "The httpd server version, used to host Digital Applications. Usage of 'alpine' will be enforced."
        },
        "slackNotifications": {
          "example": "null",
          "$ref": "#/definitions/SlackNotificationV2DTO"
        }
      },
      "title": "DigitalApplicationsConfigV2DTO"
    },
    "EcrDTO": {
      "type": "object",
      "required": ["appImageRepo"],
      "properties": {
        "appImageRepo": {
          "type": "string",
          "example": "mdev-acme-insuranceplatform/digital-test",
          "description": "Name of the Docker repository on ECR."
        }
      },
      "title": "EcrDTO"
    },
    "EcrV2DTO": {
      "type": "object",
      "required": ["appImageRepo"],
      "properties": {
        "appImageRepo": {
          "type": "string",
          "example": "mdev-acme-insuranceplatform/digital-test",
          "description": "The name of the ECR Docker repository with the application images built in the customer pipeline."
        }
      },
      "title": "EcrV2DTO"
    },
    "EnvironmentConfigDTO": {
      "type": "object",
      "required": ["bitBucket", "ecr", "git", "projectId"],
      "properties": {
        "assuranceToolsImage": {
          "type": "string",
          "example": "guidewire/assurance-tools:latest",
          "description": "Repository and tag of the Docker image (residing in the shared ECR registry) containing the tools used for the static analysis build."
        },
        "baseDockerImage": {
          "type": "string",
          "example": "bc-base-2.0.6",
          "description": "Application docker image name to use."
        },
        "baseProject": {
          "example": "null",
          "$ref": "#/definitions/BaseProjectDTO"
        },
        "bitBucket": {
          "example": "null",
          "$ref": "#/definitions/BitBucketDTO"
        },
        "digitalApplicationsConfig": {
          "example": "null",
          "$ref": "#/definitions/DigitalApplicationsConfigDTO"
        },
        "ecr": {
          "example": "null",
          "$ref": "#/definitions/EcrDTO"
        },
        "git": {
          "example": "null",
          "$ref": "#/definitions/GitDTO"
        },
        "gtFrameworkDockerImage": {
          "type": "string",
          "example": "testcafe-python-java:latest",
          "description": "Docker image to run GT Framework tests in."
        },
        "gunitServerTestsRunMemSizeMB": {
          "type": "integer",
          "format": "int32",
          "example": 4096,
          "description": "Size of memory for running server tests in MB."
        },
        "gunitSmokeTestsRunMemSizeMB": {
          "type": "integer",
          "format": "int32",
          "example": 4096,
          "description": "Size of memory for running smoke tests in MB."
        },
        "insuranceSuiteBuildTasks": {
          "type": "array",
          "example": ["webResources", "warTomcatDbcp", "genDataDictionary"],
          "description": "List of gwb tasks used during Build Application pipelines for Insurance Suite applications. List requires to contain 'warTomcatDbcp' and 'genDataDictionary' tasks for building process",
          "items": {
            "type": "string"
          }
        },
        "log4jCheckEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the runtime classpath be searched for vulnerable versions of the log4j-core library before every build, failing in the case any such version is found."
        },
        "projectId": {
          "type": "string",
          "example": "claimcentertest",
          "description": "Unique project identifier."
        },
        "snowPatrolConfig": {
          "example": "null",
          "$ref": "#/definitions/SnowPatrolConfigDTO"
        },
        "solrBaseDockerImage": {
          "type": "string",
          "example": "solr-base-1.0.4",
          "description": "Solr base docker image name to use."
        },
        "solrSupport": {
          "example": "null",
          "$ref": "#/definitions/SolrSupportDTO"
        },
        "sqs": {
          "example": "null",
          "$ref": "#/definitions/SqsDTO"
        },
        "staticAnalysisBuild": {
          "example": "null",
          "$ref": "#/definitions/StaticAnalysisBuildDTO"
        },
        "testEnv": {
          "type": "string",
          "example": "h2mem",
          "description": "Value of \"env\" parameter for running tests. If not set or blank, framework-specific defaults will be used in TeamCity build configurations."
        },
        "updateBuild": {
          "example": "null",
          "$ref": "#/definitions/UpdateBuildDTO"
        }
      },
      "title": "EnvironmentConfigDTO"
    },
    "GitDTO": {
      "type": "object",
      "required": ["appSrcUrl", "sshKeyName"],
      "properties": {
        "appSrcUrl": {
          "type": "string",
          "example": "ssh://git@bitbucket.bitbucket-acme/DIGITAL-TEST/ClaimCenter.git",
          "description": "Git repository URL address."
        },
        "sshKeyName": {
          "type": "string",
          "example": "bitbucket_is",
          "description": "Name of SSH key used for the connection to the repository."
        }
      },
      "title": "GitDTO"
    },
    "GitV2DTO": {
      "type": "object",
      "required": ["appSrcUrl", "sshKeyName"],
      "properties": {
        "appSrcUrl": {
          "type": "string",
          "example": "ssh://git@bitbucket.bitbucket-acme/DIGITAL-TEST/ClaimCenter.git",
          "description": "URL (with the SSH protocol) of the Git repository with the application sources."
        },
        "sshKeyName": {
          "type": "string",
          "example": "bitbucket_is",
          "description": "The name of SSH key used for the connection to the repository."
        }
      },
      "title": "GitV2DTO"
    },
    "GtFrameworkTestDTO": {
      "type": "object",
      "required": [
        "bcUrl",
        "bddTestsEnabled",
        "ccUrl",
        "cmUrl",
        "nonBddTestsEnabled",
        "pcUrl"
      ],
      "properties": {
        "bcUrl": {
          "type": "string",
          "example": "https://bc.example.com/BillingCenter.do",
          "description": "URL to BillingCenter instance to execute GT UI tests against."
        },
        "bddTestsEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Is GT UI BDD Tests build enabled."
        },
        "ccUrl": {
          "type": "string",
          "example": "https://cc.example.com/ClaimCenter.do",
          "description": "URL to ClaimCenter instance to execute GT UI tests against."
        },
        "cmUrl": {
          "type": "string",
          "example": "https://cm.example.com/ContactManager.do",
          "description": "URL to ContactManager instance to execute GT UI tests against."
        },
        "nonBddTestsEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Is GT UI Non-BDD Tests build enabled."
        },
        "pcUrl": {
          "type": "string",
          "example": "https://pc.example.com/PolicyCenter.do",
          "description": "URL to PolicyCenter instance to execute GT UI tests against."
        }
      },
      "title": "GtFrameworkTestDTO"
    },
    "GtFrameworkTestV2DTO": {
      "type": "object",
      "required": [
        "bcUrl",
        "bddTestsEnabled",
        "ccUrl",
        "cmUrl",
        "nonBddTestsEnabled",
        "pcUrl"
      ],
      "properties": {
        "bcUrl": {
          "type": "string",
          "example": "https://bc.example.com/BillingCenter.do",
          "description": "URL to the BillingCenter instance to execute the GT Framework tests against."
        },
        "bddTestsEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the GT UI BDD Tests be enabled."
        },
        "ccUrl": {
          "type": "string",
          "example": "https://cc.example.com/ClaimCenter.do",
          "description": "URL to the ClaimCenter instance to execute the GT Framework tests against."
        },
        "cmUrl": {
          "type": "string",
          "example": "https://cm.example.com/ContactManager.do",
          "description": "URL to the ContactManager instance to execute the GT Framework tests against."
        },
        "nonBddTestsEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the GT UI Non-BDD Tests be enabled."
        },
        "pcUrl": {
          "type": "string",
          "example": "https://pc.example.com/PolicyCenter.do",
          "description": "URL to the PolicyCenter instance to execute the GT Framework tests against."
        }
      },
      "title": "GtFrameworkTestV2DTO"
    },
    "GunitSmokeTestDTO": {
      "type": "object",
      "required": ["suites"],
      "properties": {
        "buildEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Smoke Tests build be enabled"
        },
        "enableCodeCoverage": {
          "type": "boolean",
          "example": true,
          "description": "Should code coverage tool (JaCoCo) be enabled."
        },
        "runTestMemSizeMB": {
          "type": "integer",
          "format": "int32",
          "example": 4096,
          "description": "Size of memory for running tests in MB."
        },
        "suites": {
          "type": "array",
          "example": [
            {
              "suiteName": "com.guidewire.test.ExampleSuite",
              "preMerge": true,
              "postMerge": false
            }
          ],
          "description": "List of test suites.",
          "items": {
            "$ref": "#/definitions/GunitTestSuiteDTO"
          }
        },
        "vcsTriggerEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the tests run automatically on any change in code (for all branches except gw-releases)"
        },
        "verifySuitesPresenceEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the configured test suites presence in the codebase be verified prior to running tests, failing in case any test suite is not found."
        }
      },
      "title": "GunitSmokeTestDTO"
    },
    "GunitSmokeTestV2DTO": {
      "type": "object",
      "required": ["suites"],
      "properties": {
        "buildEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Smoke Tests build be enabled."
        },
        "enableCodeCoverage": {
          "type": "boolean",
          "example": true,
          "description": "Should the code coverage (using JaCoCo) be enabled."
        },
        "suites": {
          "type": "array",
          "example": [
            {
              "suiteName": "com.guidewire.test.ExampleSuite",
              "preMerge": true,
              "postMerge": false
            }
          ],
          "description": "The list of test suites.",
          "items": {
            "$ref": "#/definitions/TestSuiteDTO"
          }
        },
        "vcsTriggerEnabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Smoke Tests run automatically on any change in code (for all branches except gw-releases)."
        },
        "verifySuitesPresenceEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the configured test suites presence in the codebase be verified prior to running tests, failing in the case any of the configured test suites is not found."
        }
      },
      "title": "GunitSmokeTestV2DTO"
    },
    "GunitTestDTO": {
      "type": "object",
      "required": ["suites"],
      "properties": {
        "enableCodeCoverage": {
          "type": "boolean",
          "example": true,
          "description": "Should code coverage tool (JaCoCo) be enabled."
        },
        "runTestMemSizeMB": {
          "type": "integer",
          "format": "int32",
          "example": 4096,
          "description": "Size of memory for running tests in MB."
        },
        "suites": {
          "type": "array",
          "example": [
            {
              "suiteName": "com.guidewire.test.ExampleSuite",
              "preMerge": true,
              "postMerge": false
            }
          ],
          "description": "List of test suites.",
          "items": {
            "$ref": "#/definitions/GunitTestSuiteDTO"
          }
        },
        "verifySuitesPresenceEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the configured test suites presence in the codebase be verified prior to running tests, failing in case any test suite is not found."
        }
      },
      "title": "GunitTestDTO"
    },
    "GunitTestSuiteDTO": {
      "type": "object",
      "required": ["postMerge", "preMerge", "suiteName"],
      "properties": {
        "postMerge": {
          "type": "boolean",
          "example": false,
          "description": "Should be run after merge."
        },
        "preMerge": {
          "type": "boolean",
          "example": true,
          "description": "Should be run before merge."
        },
        "suiteName": {
          "type": "string",
          "example": "com.guidewire.test.ExampleSuite",
          "description": "Test suite name."
        }
      },
      "title": "GunitTestSuiteDTO"
    },
    "GunitTestV2DTO": {
      "type": "object",
      "required": ["suites"],
      "properties": {
        "enableCodeCoverage": {
          "type": "boolean",
          "example": true,
          "description": "Should the code coverage (using JaCoCo) be enabled."
        },
        "suites": {
          "type": "array",
          "example": [
            {
              "suiteName": "com.guidewire.test.ExampleSuite",
              "preMerge": true,
              "postMerge": false
            }
          ],
          "description": "The list of test suites.",
          "items": {
            "$ref": "#/definitions/TestSuiteDTO"
          }
        },
        "verifySuitesPresenceEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the configured test suites presence in the codebase be verified prior to running tests, failing in the case any of the configured test suites is not found."
        }
      },
      "title": "GunitTestV2DTO"
    },
    "InsurerConfigDTO": {
      "type": "object",
      "properties": {
        "apiTestBench": {
          "example": "null",
          "$ref": "#/definitions/ApiTestBenchV2DTO"
        },
        "behaviorTests": {
          "example": "null",
          "$ref": "#/definitions/BehaviorTestV2DTO"
        },
        "gtFrameworkTest": {
          "example": "null",
          "$ref": "#/definitions/GtFrameworkTestV2DTO"
        },
        "gunitServerTests": {
          "example": "null",
          "$ref": "#/definitions/GunitTestV2DTO"
        },
        "gunitSmokeTests": {
          "example": "null",
          "$ref": "#/definitions/GunitSmokeTestV2DTO"
        },
        "jacocoScanBasePackages": {
          "type": "array",
          "example": ["com.example", "mytenant", "com.custom.base"],
          "description": "List of base packages for the Jacoco code coverage scan. Code coverage will be performed for the specified packages as well as all the nested packages.",
          "items": {
            "type": "string"
          }
        },
        "jacocoVersion": {
          "type": "string",
          "example": "0.8.5",
          "description": "Version of Jacoco to use during GUnit tests."
        },
        "verifyBlueGreenBuild": {
          "example": "null",
          "$ref": "#/definitions/VerifyBlueGreenBuildV2DTO"
        }
      },
      "title": "InsurerConfigDTO"
    },
    "InternalConfigDTO": {
      "type": "object",
      "required": ["baseDockerImage", "bitBucket", "ecr", "git", "projectId"],
      "properties": {
        "baseDockerImage": {
          "type": "string",
          "example": "bc-base-2.0.6",
          "description": "Application Docker image name to use."
        },
        "bitBucket": {
          "example": "null",
          "$ref": "#/definitions/BitBucketV2DTO"
        },
        "digitalApplicationsConfig": {
          "example": "null",
          "$ref": "#/definitions/DigitalApplicationsConfigV2DTO"
        },
        "ecr": {
          "example": "null",
          "$ref": "#/definitions/EcrV2DTO"
        },
        "git": {
          "example": "null",
          "$ref": "#/definitions/GitV2DTO"
        },
        "gtFrameworkDockerImage": {
          "type": "string",
          "example": "testcafe-python-java:latest",
          "description": "Docker image to run GT Framework tests in."
        },
        "gunitServerTestsRunMemSizeMB": {
          "type": "integer",
          "format": "int32",
          "example": 4096,
          "description": "Size of memory for running Server Tests in MB."
        },
        "gunitSmokeTestsRunMemSizeMB": {
          "type": "integer",
          "format": "int32",
          "example": 4096,
          "description": "Size of memory for running Smoke Tests in MB."
        },
        "insuranceSuiteBuildTasks": {
          "type": "array",
          "example": ["webResources", "warTomcatDbcp", "genDataDictionary"],
          "description": "List of gwb tasks used during Build Application pipelines for Insurance Suite applications. List requires to contain 'warTomcatDbcp' and 'genDataDictionary' tasks for building process",
          "items": {
            "type": "string"
          }
        },
        "log4jCheckEnabled": {
          "type": "boolean",
          "example": true,
          "description": "Should the runtime classpath be searched for vulnerable versions of the log4j-core library before every build, failing in the case any such version is found."
        },
        "projectId": {
          "type": "string",
          "example": "claimcentertest",
          "description": "Unique project identifier."
        },
        "snowPatrolConfig": {
          "example": "null",
          "$ref": "#/definitions/SnowPatrolConfigV2DTO"
        },
        "solrBaseDockerImage": {
          "type": "string",
          "example": "solr-base-1.0.4",
          "description": "Solr base docker image name to use."
        },
        "solrSupport": {
          "example": "null",
          "$ref": "#/definitions/SolrSupportV2DTO"
        },
        "staticAnalysisBuild": {
          "example": "null",
          "$ref": "#/definitions/StaticAnalysisBuildV2DTO"
        },
        "testEnv": {
          "type": "string",
          "example": "h2mem",
          "description": "Value of the \"env\" parameter for running tests. If not set or blank, framework-specific defaults will be used in the TeamCity build configurations."
        },
        "updateBuild": {
          "example": "null",
          "$ref": "#/definitions/UpdateBuildV2DTO"
        }
      },
      "title": "InternalConfigDTO"
    },
    "JsonPatchExample": {
      "type": "object",
      "required": ["op", "path"],
      "properties": {
        "op": {
          "type": "string",
          "example": "replace",
          "description": "The operation to be performed",
          "enum": ["add", "remove", "replace", "move", "copy", "test"]
        },
        "path": {
          "type": "string",
          "example": "/gunitServerTests/suites",
          "description": "A JSON Pointer on which operation is performed"
        },
        "value": {
          "type": "object",
          "example": "null",
          "description": "The value to be used within the operations."
        }
      },
      "title": "JsonPatchExample"
    },
    "SlackNotificationDTO": {
      "type": "object",
      "required": ["botToken", "channel", "clientId", "clientSecret"],
      "properties": {
        "botToken": {
          "type": "string",
          "example": "xoxb-XXXXXXXXXXXX-TTTTTTTTTTTTTT",
          "description": "Bot token."
        },
        "channel": {
          "type": "string",
          "example": "#example-digital-builds",
          "description": "Slack Channel name where notification will be sent."
        },
        "clientId": {
          "type": "string",
          "example": "null",
          "description": "Slack Client Id."
        },
        "clientSecret": {
          "type": "string",
          "example": "null",
          "description": "Slack Client Secret."
        }
      },
      "title": "SlackNotificationDTO"
    },
    "SlackNotificationV2DTO": {
      "type": "object",
      "required": ["botToken", "channel", "clientId", "clientSecret"],
      "properties": {
        "botToken": {
          "type": "string",
          "example": "xoxb-XXXXXXXXXXXX-TTTTTTTTTTTTTT",
          "description": "The bot token."
        },
        "channel": {
          "type": "string",
          "example": "#example-digital-builds",
          "description": "Slack Channel name where notification will be sent."
        },
        "clientId": {
          "type": "string",
          "example": "null",
          "description": "Slack Client Id used to autheticate with Slack."
        },
        "clientSecret": {
          "type": "string",
          "example": "null",
          "description": "Slack Client Secret used to authenticate with Slack."
        }
      },
      "title": "SlackNotificationV2DTO"
    },
    "SnowPatrolConfigDTO": {
      "type": "object",
      "properties": {
        "branchesToBlockPR": {
          "type": "array",
          "example": ["develop", "master", "gw-releases"],
          "description": "List of target branches against which PR will be blocked",
          "items": {
            "type": "string"
          }
        },
        "customerSpecificConfigurationBranch": {
          "type": "string",
          "example": "develop",
          "description": "Configuration project branch where customer specific profile file is present"
        },
        "customerSpecificProfileFile": {
          "type": "string",
          "example": "src/resources/CloudAssurance-Inspection-Profile-ClientModified.xml",
          "description": "Customer specific profile file in Configuration project"
        },
        "dockerImage": {
          "type": "string",
          "example": "guidewire/assurance-tools:1.2.1-surepath-1.0.14",
          "description": "Repository and tag of the Docker image (residing in the shared ECR registry) containing the tools used for the static analysis build."
        },
        "enableCustomerSpecificProfile": {
          "type": "boolean",
          "example": false,
          "description": "Enable run inspections with customer-specific profile"
        },
        "inspectionErrorThreshold": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The threshold of error level inspections that are allowed for SnowPatrol"
        }
      },
      "title": "SnowPatrolConfigDTO"
    },
    "SnowPatrolConfigV2DTO": {
      "type": "object",
      "properties": {
        "branchesToBlockPR": {
          "type": "array",
          "example": ["develop", "master", "gw-releases"],
          "description": "List of target branches against which PR will be blocked",
          "items": {
            "type": "string"
          }
        },
        "customerSpecificConfigurationBranch": {
          "type": "string",
          "example": "develop",
          "description": "Configuration project branch where the customer-specific profile file is present."
        },
        "customerSpecificProfileFile": {
          "type": "string",
          "example": "src/resources/CloudAssurance-Inspection-Profile-ClientModified.xml",
          "description": "Path to the customer-specific profile file in the Configuration project."
        },
        "dockerImage": {
          "type": "string",
          "example": "guidewire/assurance-tools:latest",
          "description": "Repository and tag of the Docker image (residing in the shared ECR registry) containing the tools used for the static analysis build."
        },
        "enableCustomerSpecificProfile": {
          "type": "boolean",
          "example": false,
          "description": "Should the inspections with customer-specific profile be enabled."
        },
        "inspectionErrorThreshold": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The threshold of error level inspections that are allowed for SnowPatrol."
        }
      },
      "title": "SnowPatrolConfigV2DTO"
    },
    "SolrSupportDTO": {
      "type": "object",
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Should Solr support be enabled. According to this flag, the 'Build And Package Solr' build and the 'Dockerize Solr' build will be visible or not in the applicable pipelines."
        }
      },
      "title": "SolrSupportDTO"
    },
    "SolrSupportV2DTO": {
      "type": "object",
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Should Solr support be enabled. According to this flag, the 'Build And Package Solr' build and the 'Dockerize Solr' build will be visible or not in the applicable pipelines."
        }
      },
      "title": "SolrSupportV2DTO"
    },
    "SqsDTO": {
      "type": "object",
      "required": ["portalsSqsUrl"],
      "properties": {
        "portalsSqsUrl": {
          "type": "string",
          "example": "https://sqs.us-west-2.amazonaws.com/00000000001/tenant-sopot-build-pipeline-dev",
          "description": "Portals SQS URL address"
        }
      },
      "title": "SqsDTO"
    },
    "StaticAnalysisBuildDTO": {
      "type": "object",
      "required": ["enabled", "inspectionProfile"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Is Static Analysis build enabled."
        },
        "inspectionProfile": {
          "type": "string",
          "example": "CloudAssurance-Inspection-Profile-ClientModified.xml",
          "description": "Inspection profile xml name"
        }
      },
      "title": "StaticAnalysisBuildDTO"
    },
    "StaticAnalysisBuildV2DTO": {
      "type": "object",
      "required": ["enabled", "inspectionProfile"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Static Analysis build be enabled."
        },
        "inspectionProfile": {
          "type": "string",
          "example": "CloudAssurance-Inspection-Profile-ClientModified.xml",
          "description": "Inspection profile XML name"
        }
      },
      "title": "StaticAnalysisBuildV2DTO"
    },
    "TestSuiteDTO": {
      "type": "object",
      "required": ["postMerge", "preMerge", "suiteName"],
      "properties": {
        "postMerge": {
          "type": "boolean",
          "example": false,
          "description": "Should be included in the test builds only running on the default branch."
        },
        "preMerge": {
          "type": "boolean",
          "example": true,
          "description": "Should be included in the test builds running on all custom branches."
        },
        "suiteName": {
          "type": "string",
          "example": "com.guidewire.test.ExampleSuite",
          "description": "Fully qualified name of the class containing the test suite."
        }
      },
      "title": "TestSuiteDTO"
    },
    "TestSuitesDTO": {
      "type": "object",
      "required": ["ciCdConfigType", "suites"],
      "properties": {
        "ciCdConfigType": {
          "type": "string",
          "example": "CC",
          "enum": [
            "PC",
            "BC",
            "CC",
            "CM",
            "PORTALS",
            "GT_FRAMEWORK",
            "JUTRO_APP"
          ]
        },
        "suites": {
          "type": "array",
          "example": [
            {
              "suiteName": "com.guidewire.test.ExampleSuite",
              "preMerge": true,
              "postMerge": false
            }
          ],
          "description": "List of test suites.",
          "items": {
            "$ref": "#/definitions/TestSuiteDTO"
          }
        }
      },
      "title": "TestSuitesDTO"
    },
    "Unit": {
      "type": "object",
      "title": "Unit"
    },
    "UpdateBuildDTO": {
      "type": "object",
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Is Update build enabled. Update build updates customer code to version specified by image tag parameter."
        }
      },
      "title": "UpdateBuildDTO"
    },
    "UpdateBuildV2DTO": {
      "type": "object",
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Update build be enabled. Update build updates customer code to version specified by image tag parameter."
        }
      },
      "title": "UpdateBuildV2DTO"
    },
    "VerifyBlueGreenBuildDTO": {
      "type": "object",
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Is Verify Blue/Green build enabled. Verify blue/green provides customer for testing their new configuration is compatible for blue/green upgrade."
        }
      },
      "title": "VerifyBlueGreenBuildDTO"
    },
    "VerifyBlueGreenBuildV2DTO": {
      "type": "object",
      "required": ["enabled"],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": false,
          "description": "Should the Verify Blue/Green build be enabled. Verify blue/green provides a way for customers to test if their new configuration is compatible for blue/green upgrade."
        }
      },
      "title": "VerifyBlueGreenBuildV2DTO"
    }
  },
  "components": {
    "parameters": {},
    "schemas": {}
  }
}
